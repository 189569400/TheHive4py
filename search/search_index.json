{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TheHive4py # TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template. Installation # On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command.","title":"TheHive4py"},{"location":"#thehive4py","text":"TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template.","title":"TheHive4py"},{"location":"#installation","text":"On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command.","title":"Installation"},{"location":"reference/api/","text":"API # This is the reference of all the methods available on thehive4py.api.TheHiveApi . # TheHiveApi # __init__ ( self , url , principal , organisation = None , password = None , proxies = {}, cert = True ) special # Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None organisation str The name of the organisation against which api calls will be run. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True Basic example Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' ) Full example Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate proxies = { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' , organisation = 'my-org' , proxies = proxies , cert = True ) create_alert ( self , alert ) # :param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response create_case ( self , case ) # :param case: The case details :type case: Case defined in models.py :return: TheHive case :rtype: requests.Response create_case_observable ( self , case_id , case_observable ) # :param case_id: Case identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: requests.Response create_case_task ( self , case_id , case_task ) # :param case_id: Case identifier :param case_task: TheHive task :type case_task: CaseTask defined in models.py :return: TheHive task :rtype: requests.Response create_case_template ( self , case_template ) # :param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse create_custom_field ( self , custom_field ) # This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py create_task_log ( self , task_id , case_task_log ) # :param task_id: Task identifier :param case_task_log: TheHive log :type case_task_log: CaseTaskLog defined in models.py :return: TheHive log :rtype: requests.Response delete_case ( self , case_id , force = False ) # Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). :param case_id: Case identifier :return: A requests response object. find_alerts ( self , ** attributes ) # :return: list of Alerts :rtype: json find_case_templates ( self , ** attributes ) # :return: list of case templates :rtype: json find_first ( self , ** attributes ) # :return: first case of result set given by query :rtype: dict find_tasks ( self , ** attributes ) # :return: list of Tasks :rtype: json get_alert ( self , alert_id ) # :param alert_id: Alert identifier :return: TheHive Alert :rtype: json get_case ( self , case_id ) # :param case_id: Case identifier :return: TheHive case :rtype: json get_case_observables ( self , case_id , ** attributes ) # :param case_id: Case identifier :return: list of observables ;rtype: json get_case_task ( self , task_id ) # :param task_id: Task identifier :return: TheHive task by id :rtype: json get_case_template ( self , name ) # :param name: Case template name :return: TheHive case template :rtype: json get_current_user ( self ) # Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description Response object resulting from the API call. get_linked_cases ( self , case_id ) # :param case_id: Case identifier :return: TheHive case(s) :rtype: json get_task_log ( self , log_id ) # :param log_id: Task log identifier :return: TheHive task log by id :rtype: json get_task_logs ( self , task_id ) # :param task_id: Task identifier :return: TheHive logs :rtype: json health ( self ) # Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call. mark_alert_as_read ( self , alert_id ) # Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return: mark_alert_as_unread ( self , alert_id ) # Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return: promote_alert_to_case ( self , alert_id , case_template = None ) # This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json run_analyzer ( self , cortex_id , artifact_id , analyzer_id ) # :param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json update_alert ( self , alert_id , alert , fields = []) # Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: update_case ( self , case , fields = []) # Update a case. :param case: The case to update. The case's id determines which case to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: update_case_observable ( self , observable_id , case_observable ) # :param observable_id: Observable identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: json update_case_observables ( self , observable , fields = []) # :Updates TheHive observable :param observable: The observable details to update :return: update_case_task ( self , task , fields = []) # :Updates TheHive Task :param case: The task to update. The task's id determines which Task to update. :return:","title":"API"},{"location":"reference/api/#api","text":"This is the reference of all the methods available on thehive4py.api.TheHiveApi .","title":"API"},{"location":"reference/api/#thehive4py.api","text":"","title":"thehive4py.api"},{"location":"reference/api/#thehive4py.api.TheHiveApi","text":"","title":"TheHiveApi"},{"location":"reference/api/#thehive4py.api.TheHiveApi.__init__","text":"Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None organisation str The name of the organisation against which api calls will be run. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True Basic example Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' ) Full example Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate proxies = { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' , organisation = 'my-org' , proxies = proxies , cert = True )","title":"__init__()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_alert","text":":param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response","title":"create_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case","text":":param case: The case details :type case: Case defined in models.py :return: TheHive case :rtype: requests.Response","title":"create_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_observable","text":":param case_id: Case identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: requests.Response","title":"create_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_task","text":":param case_id: Case identifier :param case_task: TheHive task :type case_task: CaseTask defined in models.py :return: TheHive task :rtype: requests.Response","title":"create_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_template","text":":param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse","title":"create_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_custom_field","text":"This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py","title":"create_custom_field()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_task_log","text":":param task_id: Task identifier :param case_task_log: TheHive log :type case_task_log: CaseTaskLog defined in models.py :return: TheHive log :rtype: requests.Response","title":"create_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_case","text":"Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). :param case_id: Case identifier :return: A requests response object.","title":"delete_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_alerts","text":":return: list of Alerts :rtype: json","title":"find_alerts()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_case_templates","text":":return: list of case templates :rtype: json","title":"find_case_templates()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_first","text":":return: first case of result set given by query :rtype: dict","title":"find_first()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_tasks","text":":return: list of Tasks :rtype: json","title":"find_tasks()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_alert","text":":param alert_id: Alert identifier :return: TheHive Alert :rtype: json","title":"get_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case","text":":param case_id: Case identifier :return: TheHive case :rtype: json","title":"get_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_observables","text":":param case_id: Case identifier :return: list of observables ;rtype: json","title":"get_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_task","text":":param task_id: Task identifier :return: TheHive task by id :rtype: json","title":"get_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_template","text":":param name: Case template name :return: TheHive case template :rtype: json","title":"get_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_current_user","text":"Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description Response object resulting from the API call.","title":"get_current_user()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_linked_cases","text":":param case_id: Case identifier :return: TheHive case(s) :rtype: json","title":"get_linked_cases()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_log","text":":param log_id: Task log identifier :return: TheHive task log by id :rtype: json","title":"get_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_logs","text":":param task_id: Task identifier :return: TheHive logs :rtype: json","title":"get_task_logs()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.health","text":"Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call.","title":"health()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_read","text":"Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return:","title":"mark_alert_as_read()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_unread","text":"Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return:","title":"mark_alert_as_unread()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.promote_alert_to_case","text":"This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json","title":"promote_alert_to_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.run_analyzer","text":":param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json","title":"run_analyzer()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_alert","text":"Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return:","title":"update_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case","text":"Update a case. :param case: The case to update. The case's id determines which case to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return:","title":"update_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observable","text":":param observable_id: Observable identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: json","title":"update_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observables","text":":Updates TheHive observable :param observable: The observable details to update :return:","title":"update_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_task","text":":Updates TheHive Task :param case: The task to update. The task's id determines which Task to update. :return:","title":"update_case_task()"},{"location":"reference/auth/","text":"Auth # # BasicAuth # __init__ ( self , username , password , organisation = None ) special # A custom basic authentication class for requests, that takes into account the organisation header Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 8 9 10 11 12 13 14 15 16 17 18 19 def __init__ ( self , username , password , organisation = None ): \"\"\" A custom basic authentication class for requests, that takes into account the organisation header Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation BearerAuth # __init__ ( self , api_key , organisation = None ) special # A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , api_key , organisation = None ): \"\"\" A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"Auth"},{"location":"reference/auth/#auth","text":"","title":"Auth"},{"location":"reference/auth/#thehive4py.auth","text":"","title":"thehive4py.auth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth","text":"","title":"BasicAuth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth.__init__","text":"A custom basic authentication class for requests, that takes into account the organisation header Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 8 9 10 11 12 13 14 15 16 17 18 19 def __init__ ( self , username , password , organisation = None ): \"\"\" A custom basic authentication class for requests, that takes into account the organisation header Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation","title":"__init__()"},{"location":"reference/auth/#thehive4py.auth.BearerAuth","text":"","title":"BearerAuth"},{"location":"reference/auth/#thehive4py.auth.BearerAuth.__init__","text":"A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , api_key , organisation = None ): \"\"\" A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"__init__()"},{"location":"reference/exceptions/","text":"Exceptions # # AlertException # Exception raised by failure of API calls related to Alert handling CaseException # Exception raised by failure of API calls related to Case handling CaseObservableException # Exception raised by failure of API calls related to Case Observable handling CaseTaskException # Exception raised by failure of API calls related to Case Task handling CaseTemplateException # Exception raised by failure of API calls related to Case Template handling CustomFieldException # Exception raised by failure of API calls related to Custom Fields handling TheHiveException # Base class for TheHive exceptions","title":"Exceptions"},{"location":"reference/exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions","text":"","title":"thehive4py.exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions.AlertException","text":"Exception raised by failure of API calls related to Alert handling","title":"AlertException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseException","text":"Exception raised by failure of API calls related to Case handling","title":"CaseException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseObservableException","text":"Exception raised by failure of API calls related to Case Observable handling","title":"CaseObservableException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTaskException","text":"Exception raised by failure of API calls related to Case Task handling","title":"CaseTaskException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTemplateException","text":"Exception raised by failure of API calls related to Case Template handling","title":"CaseTemplateException"},{"location":"reference/exceptions/#thehive4py.exceptions.CustomFieldException","text":"Exception raised by failure of API calls related to Custom Fields handling","title":"CustomFieldException"},{"location":"reference/exceptions/#thehive4py.exceptions.TheHiveException","text":"Base class for TheHive exceptions","title":"TheHiveException"},{"location":"reference/models/","text":"Models # # CaseHelper # Provides helper methods for interacting with instances of the Case class. __call__ ( self , id ) special # Return an instance of Case with the given case ID. :param id: ID of a case to retrieve. __init__ ( self , thehive ) special # Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance. create ( self , title , description , ** kwargs ) # Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance. status_ok ( status_code ) staticmethod # Check whether a status code is OK update ( self , case_id , ** attributes ) # Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance. CustomField # __init__ ( self , ** attributes ) special # Class that represents a single custom field :param name: name of the custom field :param reference: internal reference name :param description: description of the custom field :param type: type of the field, possible values are string, boolean, number or date :param options: list of possible values for the field :param mandatory: True if the field is mandatory CustomJsonEncoder # default ( self , o ) # Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"Models"},{"location":"reference/models/#models","text":"","title":"Models"},{"location":"reference/models/#thehive4py.models","text":"","title":"thehive4py.models"},{"location":"reference/models/#thehive4py.models.CaseHelper","text":"Provides helper methods for interacting with instances of the Case class.","title":"CaseHelper"},{"location":"reference/models/#thehive4py.models.CaseHelper.__call__","text":"Return an instance of Case with the given case ID. :param id: ID of a case to retrieve.","title":"__call__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.__init__","text":"Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance.","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.create","text":"Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance.","title":"create()"},{"location":"reference/models/#thehive4py.models.CaseHelper.status_ok","text":"Check whether a status code is OK","title":"status_ok()"},{"location":"reference/models/#thehive4py.models.CaseHelper.update","text":"Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance.","title":"update()"},{"location":"reference/models/#thehive4py.models.CustomField","text":"","title":"CustomField"},{"location":"reference/models/#thehive4py.models.CustomField.__init__","text":"Class that represents a single custom field :param name: name of the custom field :param reference: internal reference name :param description: description of the custom field :param type: type of the field, possible values are string, boolean, number or date :param options: list of possible values for the field :param mandatory: True if the field is mandatory","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder","text":"","title":"CustomJsonEncoder"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder.default","text":"Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/query/","text":"Query # #","title":"Query"},{"location":"reference/query/#query","text":"","title":"Query"},{"location":"reference/query/#thehive4py.query","text":"","title":"thehive4py.query"}]}