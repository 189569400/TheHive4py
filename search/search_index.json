{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TheHive4py # TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template. Features # TheHive4py allows the following features: Authentication Using and API key Using a username/password pair Alerts Search for alerts Create alert Update alert Delete alert Cases Search for cases Create case Update case Delete case Tasks Search for tasks Create and update tasks Delete tasks Create task log Run responder on task Observables Search for observables Create observable Update observable Delete observable Run analyzer on observable Run responder on observable Installation # On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command. License # TheHive4py is an open source and free software released under the AGPL (Affero General Public License). We, TheHive Project, are committed to ensure that TheHive4py will remain a free and open source project on the long-run. Updates # Information, news and updates are regularly posted on TheHive Project Twitter account and on the blog . Contributing # We welcome your contributions. Please feel free to fork the code, play with it, make some patches and send us pull requests using issues . We do have a Code of conduct . Make sure to check it out before contributing. Support # Please open an issue on GitHub if you'd like to report a bug or request a feature. We are also available on Gitter to help you out. If you need to contact the project team, send an email to support@thehive-project.org . Community Discussions # We have set up a Google forum at https://groups.google.com/a/thehive-project.org/d/forum/users . To request access, you need a Google account. You may create one using a Gmail address or without one . Website # https://thehive-project.org/","title":"Home"},{"location":"#thehive4py","text":"TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template.","title":"TheHive4py"},{"location":"#features","text":"TheHive4py allows the following features: Authentication Using and API key Using a username/password pair Alerts Search for alerts Create alert Update alert Delete alert Cases Search for cases Create case Update case Delete case Tasks Search for tasks Create and update tasks Delete tasks Create task log Run responder on task Observables Search for observables Create observable Update observable Delete observable Run analyzer on observable Run responder on observable","title":"Features"},{"location":"#installation","text":"On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command.","title":"Installation"},{"location":"#license","text":"TheHive4py is an open source and free software released under the AGPL (Affero General Public License). We, TheHive Project, are committed to ensure that TheHive4py will remain a free and open source project on the long-run.","title":"License"},{"location":"#updates","text":"Information, news and updates are regularly posted on TheHive Project Twitter account and on the blog .","title":"Updates"},{"location":"#contributing","text":"We welcome your contributions. Please feel free to fork the code, play with it, make some patches and send us pull requests using issues . We do have a Code of conduct . Make sure to check it out before contributing.","title":"Contributing"},{"location":"#support","text":"Please open an issue on GitHub if you'd like to report a bug or request a feature. We are also available on Gitter to help you out. If you need to contact the project team, send an email to support@thehive-project.org .","title":"Support"},{"location":"#community-discussions","text":"We have set up a Google forum at https://groups.google.com/a/thehive-project.org/d/forum/users . To request access, you need a Google account. You may create one using a Gmail address or without one .","title":"Community Discussions"},{"location":"#website","text":"https://thehive-project.org/","title":"Website"},{"location":"changelog/","text":"Change Log # 1.7.0 (2020-05-29) # Full Changelog Implemented enhancements: Add custom field support for new types #152 Return type is not correctly filled #150 Models Case and CaseTemplate don't have PAP attribute #127 Improve jsonify function to allow excluding attributes #125 Fixed bugs: Add support to datetime for \"date\" CustomFields #138 Update alert using 'fields' is not working #130 Models should have the attribute 'id' #120 promote_alert_to_case() doesn't apply caseTemplate #114 PAP flag missing when creating a case from a retrieved Case object #111 Specify an optional case template parameter to promote_alert_to_case #115 ( agix ) Closed issues: Add support to like and wildcard operators #149 FR: Get \"task name\" in an \"case_task_log\" event #148 Create case with the hive 4 rc1 #144 Is TheHive4py still alive? #141 Add ioc and sighted attributes to case and alert artifacts #126 support for case template deletion/creation #124 Create update_case_observable #121 Example python create case with observables #113 Alert create error: ('Connection aborted.', error(104, 'Connection reset by peer') #109 Requesting analyzer report from cortex with thehive4py #107 Merged pull requests: Add support for case delete, creating custom fields and create case templates #146 ( aurelienhess ) Support for json datetime #139 ( ehooo ) Added IDs in all models #123 ( mgabriel-silva ) Added update_case_observable #122 ( mgabriel-silva ) Added support for custom owner on Case creation #118 ( victorvillar ) 1.6.0 (2018-12-17) # Full Changelog Merged pull requests: Implement some more functions #96 ( jojoob ) Create new sample bulk-alert-merge-to-case.py #95 ( david-burkett ) Update observable #94 ( joseluratm ) 1.5.3 (2018-11-16) # Full Changelog Fixed bugs: Unable to close case as TruePositive WithImpact #93 1.5.2 (2018-11-12) # Full Changelog Fixed bugs: Support task-groups for tasks (e.g. creation of Cases) #91 Closed issues: Unknown attribute alert.customFields when creating alert in version 1.5.1 #88 Merged pull requests: support for task group names #92 ( crackytsi ) 1.5.1 (2018-10-10) # Full Changelog Implemented enhancements: Add customFields to Alert #87 ( zpriddy ) 1.5.0 (2018-09-25) # Full Changelog Closed issues: Update observable #7 Update task #6 Add a simple template search method #83 Max recursion depth exceeded error #82 Merged pull requests: Feature/promote alert to case #86 ( uplateandonline ) Feature/search templates #84 ( uplateandonline ) Prevent max recursion depth exceeded error #80 ( Psynbiotik ) added search support for tasks #79 ( neok0 ) 1.4.4 (2018-07-02) # Full Changelog Fixed bugs: Missing parameter _field in Between function #71 ( tagashy ) Closed issues: Retrieve analyzer report after analysis [question] #75 Keep analyzer reports when merging a case #73 Unify the naming of statuses and filters #70 Merged pull requests: Add support for alert markAsRead/Unread #74 ( itsnotapt ) Add Support for update_case_tasks method #63 ( billmurrin ) 1.4.3 (2018-02-07) # Full Changelog Implemented enhancements: add update_alert to allow updating an alert #61 ( Rolinh ) Fixed bugs: How to close a case via API #67 CustomFields are not updated in update_case #66 Correction in update_case usage #57 Merged pull requests: fix spelling of exception #58 ( billmurrin ) created get_linked_cases method in api #60 ( billmurrin ) 1.4.2 (2017-12-27) # Full Changelog Implemented enhancements: Raise custom exceptions from api methods instead of calling sys.exit #55 Merged pull requests: Add Sighted Support to the Observable Model #54 ( billmurrin ) 1.4.1 (2017-12-19) # Full Changelog Merged pull requests: fix get_case_observables method #53 ( billmurrin ) 1.4.0 (2017-12-05) # Full Changelog Implemented enhancements: Provide just the template name when creating a case from a template #45 Add support of custom fields to the case model #39 Case helper #37 ( npratley ) Fixed bugs: Error updating case #51 Closed issues: Add a query builder capabilities #49 Run Cortex analyzer through api #40 Update case #5 Merged pull requests: Added missing attributes to the Case class. #50 ( npratley ) Added the functionality to run a Cortex analyzer on an observable #44 ( alexgoedeke ) Added get_task_logs method #42 ( billmurrin ) Added a method to update a case. #41 ( npratley ) 1.3.1 (2017-09-17) # Full Changelog Fixed bugs: Basic auth doesn't work with version 1.3.0 #38 1.3.0 (2017-09-15) # Full Changelog Implemented enhancements: Allow specifying range to return > 10 cases, observables, etc., #30 fix two cases of bad indentation in exception handling code #26 ( Rolinh ) fix default severity level of an alert #25 ( Rolinh ) Fixed bugs: certificate verify option not included in create_case_task #27 Closed issues: Add an API method to create users #33 Feature Request - Task Log Template/Boilerplate Text #32 Add support to authentication by API key #36 Add a find_alerts method to search for alerts #31 Merged pull requests: Added verify parameter to calls #28 ( billmurrin ) 1.2.3 (2017-07-20) # Full Changelog Implemented enhancements: Adding option for an Internal CA #24 Merged pull requests: Find first #23 ( 3c7 ) 1.2.2 (2017-07-06) # Full Changelog Fixed bugs: Remove print calls from TheHiveApi.find_cases method #22 1.2.1 (2017-06-29) # Full Changelog Fixed bugs: Fix the issue related to wrong base64 decoding when creating alerts #20 python-magic dependency not in setup.py #19 \"future\" dependency not documented in requirements.txt #18 Merged pull requests: Install python-magic package on setup #16 ( ilyaglow ) 1.2.0 (2017-05-12) # Full Changelog Closed issues: Add the ability to create a TheHive alert #13 Merged pull requests: Added ability to find tasks by caseId #11 ( AverageS ) 1.1.1 (2017-05-11) # Full Changelog Fixed bugs: Use basic auth when calling TheHive apis #14 1.1.0 (2017-03-23) # Full Changelog Implemented enhancements: Search for cases #4 Add observables to a case #3 1.0.1 (2017-03-08) # Full Changelog Fixed bugs: Issue creating a cases without metrics and without case template #8 1.0.0 (2017-03-08) # Closed issues: 2nd typo in setup.py #2 Typo in setup.py #1 * This Change Log was automatically generated by github_changelog_generator","title":"Change log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#170-2020-05-29","text":"Full Changelog Implemented enhancements: Add custom field support for new types #152 Return type is not correctly filled #150 Models Case and CaseTemplate don't have PAP attribute #127 Improve jsonify function to allow excluding attributes #125 Fixed bugs: Add support to datetime for \"date\" CustomFields #138 Update alert using 'fields' is not working #130 Models should have the attribute 'id' #120 promote_alert_to_case() doesn't apply caseTemplate #114 PAP flag missing when creating a case from a retrieved Case object #111 Specify an optional case template parameter to promote_alert_to_case #115 ( agix ) Closed issues: Add support to like and wildcard operators #149 FR: Get \"task name\" in an \"case_task_log\" event #148 Create case with the hive 4 rc1 #144 Is TheHive4py still alive? #141 Add ioc and sighted attributes to case and alert artifacts #126 support for case template deletion/creation #124 Create update_case_observable #121 Example python create case with observables #113 Alert create error: ('Connection aborted.', error(104, 'Connection reset by peer') #109 Requesting analyzer report from cortex with thehive4py #107 Merged pull requests: Add support for case delete, creating custom fields and create case templates #146 ( aurelienhess ) Support for json datetime #139 ( ehooo ) Added IDs in all models #123 ( mgabriel-silva ) Added update_case_observable #122 ( mgabriel-silva ) Added support for custom owner on Case creation #118 ( victorvillar )","title":"1.7.0 (2020-05-29)"},{"location":"changelog/#160-2018-12-17","text":"Full Changelog Merged pull requests: Implement some more functions #96 ( jojoob ) Create new sample bulk-alert-merge-to-case.py #95 ( david-burkett ) Update observable #94 ( joseluratm )","title":"1.6.0 (2018-12-17)"},{"location":"changelog/#153-2018-11-16","text":"Full Changelog Fixed bugs: Unable to close case as TruePositive WithImpact #93","title":"1.5.3 (2018-11-16)"},{"location":"changelog/#152-2018-11-12","text":"Full Changelog Fixed bugs: Support task-groups for tasks (e.g. creation of Cases) #91 Closed issues: Unknown attribute alert.customFields when creating alert in version 1.5.1 #88 Merged pull requests: support for task group names #92 ( crackytsi )","title":"1.5.2 (2018-11-12)"},{"location":"changelog/#151-2018-10-10","text":"Full Changelog Implemented enhancements: Add customFields to Alert #87 ( zpriddy )","title":"1.5.1 (2018-10-10)"},{"location":"changelog/#150-2018-09-25","text":"Full Changelog Closed issues: Update observable #7 Update task #6 Add a simple template search method #83 Max recursion depth exceeded error #82 Merged pull requests: Feature/promote alert to case #86 ( uplateandonline ) Feature/search templates #84 ( uplateandonline ) Prevent max recursion depth exceeded error #80 ( Psynbiotik ) added search support for tasks #79 ( neok0 )","title":"1.5.0 (2018-09-25)"},{"location":"changelog/#144-2018-07-02","text":"Full Changelog Fixed bugs: Missing parameter _field in Between function #71 ( tagashy ) Closed issues: Retrieve analyzer report after analysis [question] #75 Keep analyzer reports when merging a case #73 Unify the naming of statuses and filters #70 Merged pull requests: Add support for alert markAsRead/Unread #74 ( itsnotapt ) Add Support for update_case_tasks method #63 ( billmurrin )","title":"1.4.4 (2018-07-02)"},{"location":"changelog/#143-2018-02-07","text":"Full Changelog Implemented enhancements: add update_alert to allow updating an alert #61 ( Rolinh ) Fixed bugs: How to close a case via API #67 CustomFields are not updated in update_case #66 Correction in update_case usage #57 Merged pull requests: fix spelling of exception #58 ( billmurrin ) created get_linked_cases method in api #60 ( billmurrin )","title":"1.4.3 (2018-02-07)"},{"location":"changelog/#142-2017-12-27","text":"Full Changelog Implemented enhancements: Raise custom exceptions from api methods instead of calling sys.exit #55 Merged pull requests: Add Sighted Support to the Observable Model #54 ( billmurrin )","title":"1.4.2 (2017-12-27)"},{"location":"changelog/#141-2017-12-19","text":"Full Changelog Merged pull requests: fix get_case_observables method #53 ( billmurrin )","title":"1.4.1 (2017-12-19)"},{"location":"changelog/#140-2017-12-05","text":"Full Changelog Implemented enhancements: Provide just the template name when creating a case from a template #45 Add support of custom fields to the case model #39 Case helper #37 ( npratley ) Fixed bugs: Error updating case #51 Closed issues: Add a query builder capabilities #49 Run Cortex analyzer through api #40 Update case #5 Merged pull requests: Added missing attributes to the Case class. #50 ( npratley ) Added the functionality to run a Cortex analyzer on an observable #44 ( alexgoedeke ) Added get_task_logs method #42 ( billmurrin ) Added a method to update a case. #41 ( npratley )","title":"1.4.0 (2017-12-05)"},{"location":"changelog/#131-2017-09-17","text":"Full Changelog Fixed bugs: Basic auth doesn't work with version 1.3.0 #38","title":"1.3.1 (2017-09-17)"},{"location":"changelog/#130-2017-09-15","text":"Full Changelog Implemented enhancements: Allow specifying range to return > 10 cases, observables, etc., #30 fix two cases of bad indentation in exception handling code #26 ( Rolinh ) fix default severity level of an alert #25 ( Rolinh ) Fixed bugs: certificate verify option not included in create_case_task #27 Closed issues: Add an API method to create users #33 Feature Request - Task Log Template/Boilerplate Text #32 Add support to authentication by API key #36 Add a find_alerts method to search for alerts #31 Merged pull requests: Added verify parameter to calls #28 ( billmurrin )","title":"1.3.0 (2017-09-15)"},{"location":"changelog/#123-2017-07-20","text":"Full Changelog Implemented enhancements: Adding option for an Internal CA #24 Merged pull requests: Find first #23 ( 3c7 )","title":"1.2.3 (2017-07-20)"},{"location":"changelog/#122-2017-07-06","text":"Full Changelog Fixed bugs: Remove print calls from TheHiveApi.find_cases method #22","title":"1.2.2 (2017-07-06)"},{"location":"changelog/#121-2017-06-29","text":"Full Changelog Fixed bugs: Fix the issue related to wrong base64 decoding when creating alerts #20 python-magic dependency not in setup.py #19 \"future\" dependency not documented in requirements.txt #18 Merged pull requests: Install python-magic package on setup #16 ( ilyaglow )","title":"1.2.1 (2017-06-29)"},{"location":"changelog/#120-2017-05-12","text":"Full Changelog Closed issues: Add the ability to create a TheHive alert #13 Merged pull requests: Added ability to find tasks by caseId #11 ( AverageS )","title":"1.2.0 (2017-05-12)"},{"location":"changelog/#111-2017-05-11","text":"Full Changelog Fixed bugs: Use basic auth when calling TheHive apis #14","title":"1.1.1 (2017-05-11)"},{"location":"changelog/#110-2017-03-23","text":"Full Changelog Implemented enhancements: Search for cases #4 Add observables to a case #3","title":"1.1.0 (2017-03-23)"},{"location":"changelog/#101-2017-03-08","text":"Full Changelog Fixed bugs: Issue creating a cases without metrics and without case template #8","title":"1.0.1 (2017-03-08)"},{"location":"changelog/#100-2017-03-08","text":"Closed issues: 2nd typo in setup.py #2 Typo in setup.py #1 * This Change Log was automatically generated by github_changelog_generator","title":"1.0.0 (2017-03-08)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct # Our Pledge # In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards # Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities # Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior, in compliance with the licensing terms applying to the Project developments. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. However, these actions shall respect the licensing terms of the Project Developments that will always supersede such Code of Conduct. Scope # This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement # Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@thehive-project.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution # This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4 This version includes a clarification to ensure that the code of conduct is in compliance with the free software licensing terms of the project.","title":"Code of conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior, in compliance with the licensing terms applying to the Project developments. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. However, these actions shall respect the licensing terms of the Project Developments that will always supersede such Code of Conduct.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@thehive-project.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4 This version includes a clarification to ensure that the code of conduct is in compliance with the free software licensing terms of the project.","title":"Attribution"},{"location":"reference/api/","text":"API # This is the reference of all the methods available on thehive4py.api.TheHiveApi . # TheHiveApi # __init__ ( self , url , principal , organisation = None , password = None , proxies = {}, cert = True ) special # Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None organisation str The name of the organisation against which api calls will be run. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True Examples Basic Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' ) Full options Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate proxies = { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' , organisation = 'my-org' , proxies = proxies , cert = True ) Source code in thehive4py/api.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def __init__ ( self , url : str , principal : str , organisation = None , password = None , proxies = {}, cert = True ): \"\"\" Python API client for TheHive. Arguments: url (str): URL of Thehive instance, including the port. Ex: `http://myserver:9000` principal (str): The API key, or the username if basic authentication is used. password (str): The password for basic authentication or None. Defaults to None organisation (str): The name of the organisation against which api calls will be run. Defaults to None proxies (dict): The proxy configuration, would have `http` and `https` attributes. Defaults to {} ```python proxies: { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } ``` cert (bool): Wether or not to enable SSL certificate validation ??? note \"Examples\" === \"Basic\" Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation ```python api = TheHiveApi('http://my_thehive:9000', 'my_api_key') ``` === \"Full options\" Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate ```python proxies = { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } api = TheHiveApi('http://my_thehive:9000', 'my_api_key', organisation='my-org', proxies=proxies, cert=True ) ``` \"\"\" self . url = url self . principal = principal self . password = password self . proxies = proxies self . organisation = organisation if self . password is not None : self . auth = BasicAuth ( self . principal , self . password , self . organisation ) else : self . auth = BearerAuth ( self . principal , self . organisation ) self . cert = cert # Create a CaseHelper instance self . case = CaseHelper ( self ) create_alert ( self , alert ) # :param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response Source code in thehive4py/api.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 def create_alert ( self , alert ): \"\"\" :param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response \"\"\" req = self . url + \"/api/alert\" data = alert . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert create error: {} \" . format ( e )) create_case ( self , case ) # Create a case Parameters: Name Type Description Default case Case The case object as defined in models.my required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def create_case ( self , case ): \"\"\" Create a case Arguments: case (Case): The case object as defined in models.my Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case\" data = case . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case create error: {} \" . format ( e )) create_case_observable ( self , case_id , case_observable ) # Create a case observable Parameters: Name Type Description Default case_id Case identifier required case_observable CaseObservable as defined in models.py required Returns: Type Description response (requests.Response) Response object including a JSON description of a case observable Exceptions: Type Description CaseObservableException An error occured during case observable creation Source code in thehive4py/api.py 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def create_case_observable ( self , case_id , case_observable ): \"\"\" Create a case observable Arguments: case_id: Case identifier case_observable (CaseObservable): as defined in models.py Returns: response (requests.Response): Response object including a JSON description of a case observable Raises: CaseObservableException: An error occured during case observable creation \"\"\" req = self . url + \"/api/case/ {} /artifact\" . format ( case_id ) if case_observable . dataType == 'file' : try : mesg = json . dumps ({ \"dataType\" : case_observable . dataType , \"message\" : case_observable . message , \"tlp\" : case_observable . tlp , \"tags\" : case_observable . tags , \"ioc\" : case_observable . ioc , \"sighted\" : case_observable . sighted }) data = { \"_json\" : mesg } return requests . post ( req , data = data , files = case_observable . data [ 0 ], proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e )) else : try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = case_observable . jsonify (), proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e )) create_case_task ( self , case_id , case_task ) # Create a case task Parameters: Name Type Description Default case_id Case identifier required case_task TheHive task required return: TheHive task required Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def create_case_task ( self , case_id , case_task ): \"\"\" Create a case task Arguments: case_id: Case identifier case_task: TheHive task :return: TheHive task Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/ {} /task\" . format ( case_id ) data = case_task . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task create error: {} \" . format ( e )) create_case_template ( self , case_template ) # :param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse Source code in thehive4py/api.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 def create_case_template ( self , case_template ): \"\"\" :param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse \"\"\" req = self . url + \"/api/case/template\" data = case_template . jsonify () try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template create error: {} \" . format ( e )) create_custom_field ( self , custom_field ) # This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py Source code in thehive4py/api.py 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 def create_custom_field ( self , custom_field ): \"\"\" This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py \"\"\" if self . _check_if_custom_field_exists ( custom_field ): raise CustomFieldException ( 'Field with reference \" {} \" already exists' . format ( custom_field . reference )) data = { \"value\" : { \"name\" : custom_field . name , \"reference\" : custom_field . reference , \"description\" : custom_field . description , \"type\" : custom_field . type , \"options\" : custom_field . options , \"mandatory\" : custom_field . madatory } } req = self . url + \"/api/list/custom_fields\" return requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) create_task_log ( self , task_id , case_task_log ) # Create a task log either with an attachement or just with a log message. Parameters: Name Type Description Default task_id str Task identifier required case_task_log CaseTaskLocg Task log as defined in models.py required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 def create_task_log ( self , task_id , case_task_log ): \"\"\" Create a task log either with an attachement or just with a log message. Arguments: task_id (str): Task identifier case_task_log (CaseTaskLocg): Task log as defined in models.py Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/task/ {} /log\" . format ( task_id ) data = { '_json' : json . dumps ({ \"message\" : case_task_log . message })} if case_task_log . file : f = { 'attachment' : ( os . path . basename ( case_task_log . file ), open ( case_task_log . file , 'rb' ), magic . Magic ( mime = True ) . from_file ( case_task_log . file ))} try : return requests . post ( req , data = data , files = f , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e )) else : try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = json . dumps ({ 'message' : case_task_log . message }), proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e )) delete_case ( self , case_id , force = False ) # Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Parameters: Name Type Description Default case_id str Id of the case to delete required force bool True to physically delete the case, False to mark the case as deleted False Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description CaseException An error occured during case deletion Source code in thehive4py/api.py 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 def delete_case ( self , case_id , force = False ): \"\"\" Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Arguments: case_id (str): Id of the case to delete force (bool): True to physically delete the case, False to mark the case as deleted Returns: response (requests.Response): Response object including true or false based on the action's success Raises: CaseException: An error occured during case deletion \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) if force : req += '/force' try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case deletion error: {} \" . format ( e )) find_alerts ( self , ** attributes ) # :return: list of Alerts :rtype: json Source code in thehive4py/api.py 720 721 722 723 724 725 726 def find_alerts ( self , ** attributes ): \"\"\" :return: list of Alerts :rtype: json \"\"\" return self . __find_rows ( \"/api/alert/_search\" , ** attributes ) find_case_templates ( self , ** attributes ) # :return: list of case templates :rtype: json Source code in thehive4py/api.py 518 519 520 521 522 523 def find_case_templates ( self , ** attributes ): \"\"\" :return: list of case templates :rtype: json \"\"\" return self . __find_rows ( \"/api/case/template/_search\" , ** attributes ) find_cases ( self , ** attributes ) # Find cases using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array Case identifier required range str A rnge describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of cases. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 def find_cases ( self , ** attributes ): \"\"\" Find cases using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): Case identifier range (str): A rnge describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of cases. Raises: CaseException: An error occured during case search \"\"\" return self . __find_rows ( \"/api/case/_search\" , ** attributes ) find_first ( self , ** attributes ) # Find cases and return just the first record Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array Case identifier required range str A rnge describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON description of the case. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 def find_first ( self , ** attributes ): \"\"\" Find cases and return just the first record Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): Case identifier range (str): A rnge describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON description of the case. Raises: CaseException: An error occured during case search \"\"\" return self . find_cases ( ** attributes ) . json ()[ 0 ] find_tasks ( self , ** attributes ) # :return: list of Tasks :rtype: json Source code in thehive4py/api.py 790 791 792 793 794 795 796 def find_tasks ( self , ** attributes ): \"\"\" :return: list of Tasks :rtype: json \"\"\" return self . __find_rows ( \"/api/case/task/_search\" , ** attributes ) get_alert ( self , alert_id ) # :param alert_id: Alert identifier :return: TheHive Alert :rtype: json Source code in thehive4py/api.py 707 708 709 710 711 712 713 714 715 716 717 718 def get_alert ( self , alert_id ): \"\"\" :param alert_id: Alert identifier :return: TheHive Alert :rtype: json \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert fetch error: {} \" . format ( e )) get_case ( self , case_id ) # Get a case by id Parameters: Name Type Description Default case_id str Case identifier required Returns: Type Description response (requests.Response) Response object including a JSON description of the case. Exceptions: Type Description CaseException An error occured during case fetch Source code in thehive4py/api.py 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def get_case ( self , case_id ): \"\"\" Get a case by id Arguments: case_id (str): Case identifier Returns: response (requests.Response): Response object including a JSON description of the case. Raises: CaseException: An error occured during case fetch \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case fetch error: {} \" . format ( e )) get_case_observables ( self , case_id , ** attributes ) # Find observables of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array Case identifier required range str A rnge describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case observable. Exceptions: Type Description CaseObservableException An error occured during case observable search Source code in thehive4py/api.py 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 def get_case_observables ( self , case_id , ** attributes ): \"\"\" Find observables of a given case identified by its id Arguments: case_id (str): Id of the case query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): Case identifier range (str): A rnge describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case observable. Raises: CaseObservableException: An error occured during case observable search \"\"\" req = self . url + \"/api/case/artifact/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case' , Id ( case_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } try : return requests . post ( req , params = params , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observables search error: {} \" . format ( e )) get_case_task ( self , task_id ) # :param task_id: Task identifier :return: TheHive task by id :rtype: json Source code in thehive4py/api.py 599 600 601 602 603 604 605 606 607 608 609 610 def get_case_task ( self , task_id ): \"\"\" :param task_id: Task identifier :return: TheHive task by id :rtype: json \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e )) get_case_template ( self , name ) # :param name: Case template name :return: TheHive case template :rtype: json Source code in thehive4py/api.py 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 def get_case_template ( self , name ): \"\"\" :param name: Case template name :return: TheHive case template :rtype: json \"\"\" req = self . url + \"/api/case/template/_search\" data = { \"query\" : And ( Eq ( \"name\" , name ), Eq ( \"status\" , \"Ok\" )) } try : response = requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) json_response = response . json () if response . status_code == 200 and len ( json_response ) > 0 : return response . json ()[ 0 ] else : raise CaseTemplateException ( \"Case template fetch error: Unable to find case template {} \" . format ( name )) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template fetch error: {} \" . format ( e )) get_current_user ( self ) # Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description response (requests.Response) Response object including a JSON description of the current user Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 def get_current_user ( self ): \"\"\" Method to call the /api/current endpoint, returning the current authenticated user. Returns: response (requests.Response): Response object including a JSON description of the current user Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/user/current\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving current user: {} \" . format ( e )) get_linked_cases ( self , case_id ) # :param case_id: Case identifier :return: TheHive case(s) :rtype: json Source code in thehive4py/api.py 505 506 507 508 509 510 511 512 513 514 515 516 def get_linked_cases ( self , case_id ): \"\"\" :param case_id: Case identifier :return: TheHive case(s) :rtype: json \"\"\" req = self . url + \"/api/case/ {} /links\" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Linked cases fetch error: {} \" . format ( e )) get_task_log ( self , log_id ) # :param log_id: Task log identifier :return: TheHive task log by id :rtype: json Source code in thehive4py/api.py 612 613 614 615 616 617 618 619 620 621 622 623 def get_task_log ( self , log_id ): \"\"\" :param log_id: Task log identifier :return: TheHive task log by id :rtype: json \"\"\" req = self . url + \"/api/case/task/log/ {} \" . format ( log_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e )) get_task_logs ( self , task_id ) # :param task_id: Task identifier :return: TheHive logs :rtype: json Source code in thehive4py/api.py 625 626 627 628 629 630 631 632 633 634 635 636 637 def get_task_logs ( self , task_id ): \"\"\" :param task_id: Task identifier :return: TheHive logs :rtype: json \"\"\" req = self . url + \"/api/case/task/ {} /log\" . format ( task_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e )) health ( self ) # Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call. Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def health ( self ): \"\"\" Method to call the /api/health endpoint Returns: Response object resulting from the API call. Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/health\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving health status: {} \" . format ( e )) mark_alert_as_read ( self , alert_id ) # Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return: Source code in thehive4py/api.py 655 656 657 658 659 660 661 662 663 664 665 666 def mark_alert_as_read ( self , alert_id ): \"\"\" Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return: \"\"\" req = self . url + \"/api/alert/ {} /markAsRead\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise AlertException ( \"Mark alert as read error: {} \" . format ( e )) mark_alert_as_unread ( self , alert_id ) # Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return: Source code in thehive4py/api.py 668 669 670 671 672 673 674 675 676 677 678 679 def mark_alert_as_unread ( self , alert_id ): \"\"\" Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return: \"\"\" req = self . url + \"/api/alert/ {} /markAsUnread\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise AlertException ( \"Mark alert as unread error: {} \" . format ( e )) promote_alert_to_case ( self , alert_id , case_template = None ) # This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json Source code in thehive4py/api.py 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 def promote_alert_to_case ( self , alert_id , case_template = None ): \"\"\" This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json \"\"\" req = self . url + \"/api/alert/ {} /createCase\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert , data = json . dumps ({ \"caseTemplate\" : case_template })) except requests . exceptions . RequestException as the_exception : raise AlertException ( \"Couldn't promote alert to case: {} \" . format ( the_exception )) return None run_analyzer ( self , cortex_id , artifact_id , analyzer_id ) # :param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json Source code in thehive4py/api.py 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 def run_analyzer ( self , cortex_id , artifact_id , analyzer_id ): \"\"\" :param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json \"\"\" req = self . url + \"/api/connector/cortex/job\" try : data = json . dumps ({ \"cortexId\" : cortex_id , \"artifactId\" : artifact_id , \"analyzerId\" : analyzer_id }) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Analyzer run error: {} \" . format ( e )) update_alert ( self , alert_id , alert , fields = []) # Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: Source code in thehive4py/api.py 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 def update_alert ( self , alert_id , alert , fields = []): \"\"\" Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) # update only the alert attributes that are not read-only update_keys = [ 'tlp' , 'severity' , 'tags' , 'caseTemplate' , 'title' , 'description' , 'customFields' ] if len ( fields ) > 0 : data = { k : v for k , v in alert . __dict__ . items () if k in fields } else : data = { k : v for k , v in alert . __dict__ . items () if k in update_keys } if hasattr ( data , 'artifacts' ): data [ 'artifacts' ] = [ a . __dict__ for a in alert . artifacts ] try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise AlertException ( \"Alert update error: {} \" . format ( e )) update_case ( self , case , fields = []) # Update a case. Parameters: Name Type Description Default case The case to update. The case's id determines which case to update. required fields Optional parameter, an array of fields names, the ones we want to update [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def update_case ( self , case , fields = []): \"\"\" Update a case. Arguments: case: The case to update. The case's `id` determines which case to update. fields: Optional parameter, an array of fields names, the ones we want to update Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/ {} \" . format ( case . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'severity' , 'startDate' , 'owner' , 'flag' , 'tlp' , 'pap' , 'tags' , 'status' , 'resolutionStatus' , 'impactStatus' , 'summary' , 'endDate' , 'metrics' , 'customFields' ] data = { k : v for k , v in case . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise CaseException ( \"Case update error: {} \" . format ( e )) update_case_observable ( self , observable_id , case_observable ) # Update an existing case observable Parameters: Name Type Description Default observable_id Observable identifier required case_observable CaseObservable TheHive observable as defined in models.py required Returns: Type Description response (requests.Response) Response object including a JSON description of the updated case observable Exceptions: Type Description CaseObservableException An error occured during case observable creation Source code in thehive4py/api.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def update_case_observable ( self , observable_id , case_observable ): \"\"\" Update an existing case observable Arguments: observable_id: Observable identifier case_observable (CaseObservable): TheHive observable as defined in models.py Returns: response (requests.Response): Response object including a JSON description of the updated case observable Raises: CaseObservableException: An error occured during case observable creation \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) try : data = json . dumps ({ \"message\" : case_observable . message , \"tlp\" : case_observable . tlp , \"tags\" : case_observable . tags , \"ioc\" : case_observable . ioc , \"sighted\" : case_observable . sighted }) return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable update error: {} \" . format ( e )) update_case_observables ( self , observable , fields = []) # :Updates TheHive observable :param observable: The observable details to update :return: Source code in thehive4py/api.py 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 def update_case_observables ( self , observable , fields = []): \"\"\" :Updates TheHive observable :param observable: The observable details to update :return: \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable . id ) # Choose which attributes to send update_keys = [ 'tlp' , 'ioc' , 'flag' , 'sighted' , 'tags' , 'message' ] data = { k : v for k , v in observable . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case observable update error: {} \" . format ( e )) update_case_task ( self , task , fields = []) # Update a case task Parameters: Name Type Description Default task CaseTask Case task object as described in model.py required fields array Arry of strings representing CaseTask properties to be updated [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def update_case_task ( self , task , fields = []): \"\"\" Update a case task Arguments: task (CaseTask): Case task object as described in model.py fields (array): Arry of strings representing CaseTask properties to be updated Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'status' , 'order' , 'user' , 'owner' , 'flag' , 'endDate' ] data = { k : v for k , v in task . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task update error: {} \" . format ( e ))","title":"API"},{"location":"reference/api/#api","text":"This is the reference of all the methods available on thehive4py.api.TheHiveApi .","title":"API"},{"location":"reference/api/#thehive4py.api","text":"","title":"thehive4py.api"},{"location":"reference/api/#thehive4py.api.TheHiveApi","text":"","title":"TheHiveApi"},{"location":"reference/api/#thehive4py.api.TheHiveApi.__init__","text":"Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None organisation str The name of the organisation against which api calls will be run. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True Examples Basic Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' ) Full options Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate proxies = { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' , organisation = 'my-org' , proxies = proxies , cert = True ) Source code in thehive4py/api.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def __init__ ( self , url : str , principal : str , organisation = None , password = None , proxies = {}, cert = True ): \"\"\" Python API client for TheHive. Arguments: url (str): URL of Thehive instance, including the port. Ex: `http://myserver:9000` principal (str): The API key, or the username if basic authentication is used. password (str): The password for basic authentication or None. Defaults to None organisation (str): The name of the organisation against which api calls will be run. Defaults to None proxies (dict): The proxy configuration, would have `http` and `https` attributes. Defaults to {} ```python proxies: { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } ``` cert (bool): Wether or not to enable SSL certificate validation ??? note \"Examples\" === \"Basic\" Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation ```python api = TheHiveApi('http://my_thehive:9000', 'my_api_key') ``` === \"Full options\" Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate ```python proxies = { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } api = TheHiveApi('http://my_thehive:9000', 'my_api_key', organisation='my-org', proxies=proxies, cert=True ) ``` \"\"\" self . url = url self . principal = principal self . password = password self . proxies = proxies self . organisation = organisation if self . password is not None : self . auth = BasicAuth ( self . principal , self . password , self . organisation ) else : self . auth = BearerAuth ( self . principal , self . organisation ) self . cert = cert # Create a CaseHelper instance self . case = CaseHelper ( self )","title":"__init__()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_alert","text":":param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response Source code in thehive4py/api.py 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 def create_alert ( self , alert ): \"\"\" :param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response \"\"\" req = self . url + \"/api/alert\" data = alert . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert create error: {} \" . format ( e ))","title":"create_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case","text":"Create a case Parameters: Name Type Description Default case Case The case object as defined in models.my required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def create_case ( self , case ): \"\"\" Create a case Arguments: case (Case): The case object as defined in models.my Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case\" data = case . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case create error: {} \" . format ( e ))","title":"create_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_observable","text":"Create a case observable Parameters: Name Type Description Default case_id Case identifier required case_observable CaseObservable as defined in models.py required Returns: Type Description response (requests.Response) Response object including a JSON description of a case observable Exceptions: Type Description CaseObservableException An error occured during case observable creation Source code in thehive4py/api.py 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 def create_case_observable ( self , case_id , case_observable ): \"\"\" Create a case observable Arguments: case_id: Case identifier case_observable (CaseObservable): as defined in models.py Returns: response (requests.Response): Response object including a JSON description of a case observable Raises: CaseObservableException: An error occured during case observable creation \"\"\" req = self . url + \"/api/case/ {} /artifact\" . format ( case_id ) if case_observable . dataType == 'file' : try : mesg = json . dumps ({ \"dataType\" : case_observable . dataType , \"message\" : case_observable . message , \"tlp\" : case_observable . tlp , \"tags\" : case_observable . tags , \"ioc\" : case_observable . ioc , \"sighted\" : case_observable . sighted }) data = { \"_json\" : mesg } return requests . post ( req , data = data , files = case_observable . data [ 0 ], proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e )) else : try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = case_observable . jsonify (), proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e ))","title":"create_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_task","text":"Create a case task Parameters: Name Type Description Default case_id Case identifier required case_task TheHive task required return: TheHive task required Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def create_case_task ( self , case_id , case_task ): \"\"\" Create a case task Arguments: case_id: Case identifier case_task: TheHive task :return: TheHive task Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/ {} /task\" . format ( case_id ) data = case_task . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task create error: {} \" . format ( e ))","title":"create_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_template","text":":param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse Source code in thehive4py/api.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 def create_case_template ( self , case_template ): \"\"\" :param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse \"\"\" req = self . url + \"/api/case/template\" data = case_template . jsonify () try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template create error: {} \" . format ( e ))","title":"create_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_custom_field","text":"This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py Source code in thehive4py/api.py 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 def create_custom_field ( self , custom_field ): \"\"\" This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py \"\"\" if self . _check_if_custom_field_exists ( custom_field ): raise CustomFieldException ( 'Field with reference \" {} \" already exists' . format ( custom_field . reference )) data = { \"value\" : { \"name\" : custom_field . name , \"reference\" : custom_field . reference , \"description\" : custom_field . description , \"type\" : custom_field . type , \"options\" : custom_field . options , \"mandatory\" : custom_field . madatory } } req = self . url + \"/api/list/custom_fields\" return requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert )","title":"create_custom_field()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_task_log","text":"Create a task log either with an attachement or just with a log message. Parameters: Name Type Description Default task_id str Task identifier required case_task_log CaseTaskLocg Task log as defined in models.py required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 def create_task_log ( self , task_id , case_task_log ): \"\"\" Create a task log either with an attachement or just with a log message. Arguments: task_id (str): Task identifier case_task_log (CaseTaskLocg): Task log as defined in models.py Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/task/ {} /log\" . format ( task_id ) data = { '_json' : json . dumps ({ \"message\" : case_task_log . message })} if case_task_log . file : f = { 'attachment' : ( os . path . basename ( case_task_log . file ), open ( case_task_log . file , 'rb' ), magic . Magic ( mime = True ) . from_file ( case_task_log . file ))} try : return requests . post ( req , data = data , files = f , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e )) else : try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = json . dumps ({ 'message' : case_task_log . message }), proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e ))","title":"create_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_case","text":"Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Parameters: Name Type Description Default case_id str Id of the case to delete required force bool True to physically delete the case, False to mark the case as deleted False Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description CaseException An error occured during case deletion Source code in thehive4py/api.py 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 def delete_case ( self , case_id , force = False ): \"\"\" Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Arguments: case_id (str): Id of the case to delete force (bool): True to physically delete the case, False to mark the case as deleted Returns: response (requests.Response): Response object including true or false based on the action's success Raises: CaseException: An error occured during case deletion \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) if force : req += '/force' try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case deletion error: {} \" . format ( e ))","title":"delete_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_alerts","text":":return: list of Alerts :rtype: json Source code in thehive4py/api.py 720 721 722 723 724 725 726 def find_alerts ( self , ** attributes ): \"\"\" :return: list of Alerts :rtype: json \"\"\" return self . __find_rows ( \"/api/alert/_search\" , ** attributes )","title":"find_alerts()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_case_templates","text":":return: list of case templates :rtype: json Source code in thehive4py/api.py 518 519 520 521 522 523 def find_case_templates ( self , ** attributes ): \"\"\" :return: list of case templates :rtype: json \"\"\" return self . __find_rows ( \"/api/case/template/_search\" , ** attributes )","title":"find_case_templates()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_cases","text":"Find cases using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array Case identifier required range str A rnge describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of cases. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 def find_cases ( self , ** attributes ): \"\"\" Find cases using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): Case identifier range (str): A rnge describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of cases. Raises: CaseException: An error occured during case search \"\"\" return self . __find_rows ( \"/api/case/_search\" , ** attributes )","title":"find_cases()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_first","text":"Find cases and return just the first record Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array Case identifier required range str A rnge describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON description of the case. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 def find_first ( self , ** attributes ): \"\"\" Find cases and return just the first record Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): Case identifier range (str): A rnge describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON description of the case. Raises: CaseException: An error occured during case search \"\"\" return self . find_cases ( ** attributes ) . json ()[ 0 ]","title":"find_first()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_tasks","text":":return: list of Tasks :rtype: json Source code in thehive4py/api.py 790 791 792 793 794 795 796 def find_tasks ( self , ** attributes ): \"\"\" :return: list of Tasks :rtype: json \"\"\" return self . __find_rows ( \"/api/case/task/_search\" , ** attributes )","title":"find_tasks()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_alert","text":":param alert_id: Alert identifier :return: TheHive Alert :rtype: json Source code in thehive4py/api.py 707 708 709 710 711 712 713 714 715 716 717 718 def get_alert ( self , alert_id ): \"\"\" :param alert_id: Alert identifier :return: TheHive Alert :rtype: json \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert fetch error: {} \" . format ( e ))","title":"get_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case","text":"Get a case by id Parameters: Name Type Description Default case_id str Case identifier required Returns: Type Description response (requests.Response) Response object including a JSON description of the case. Exceptions: Type Description CaseException An error occured during case fetch Source code in thehive4py/api.py 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def get_case ( self , case_id ): \"\"\" Get a case by id Arguments: case_id (str): Case identifier Returns: response (requests.Response): Response object including a JSON description of the case. Raises: CaseException: An error occured during case fetch \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case fetch error: {} \" . format ( e ))","title":"get_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_observables","text":"Find observables of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array Case identifier required range str A rnge describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case observable. Exceptions: Type Description CaseObservableException An error occured during case observable search Source code in thehive4py/api.py 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 def get_case_observables ( self , case_id , ** attributes ): \"\"\" Find observables of a given case identified by its id Arguments: case_id (str): Id of the case query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): Case identifier range (str): A rnge describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case observable. Raises: CaseObservableException: An error occured during case observable search \"\"\" req = self . url + \"/api/case/artifact/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case' , Id ( case_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } try : return requests . post ( req , params = params , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observables search error: {} \" . format ( e ))","title":"get_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_task","text":":param task_id: Task identifier :return: TheHive task by id :rtype: json Source code in thehive4py/api.py 599 600 601 602 603 604 605 606 607 608 609 610 def get_case_task ( self , task_id ): \"\"\" :param task_id: Task identifier :return: TheHive task by id :rtype: json \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e ))","title":"get_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_template","text":":param name: Case template name :return: TheHive case template :rtype: json Source code in thehive4py/api.py 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 def get_case_template ( self , name ): \"\"\" :param name: Case template name :return: TheHive case template :rtype: json \"\"\" req = self . url + \"/api/case/template/_search\" data = { \"query\" : And ( Eq ( \"name\" , name ), Eq ( \"status\" , \"Ok\" )) } try : response = requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) json_response = response . json () if response . status_code == 200 and len ( json_response ) > 0 : return response . json ()[ 0 ] else : raise CaseTemplateException ( \"Case template fetch error: Unable to find case template {} \" . format ( name )) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template fetch error: {} \" . format ( e ))","title":"get_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_current_user","text":"Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description response (requests.Response) Response object including a JSON description of the current user Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 def get_current_user ( self ): \"\"\" Method to call the /api/current endpoint, returning the current authenticated user. Returns: response (requests.Response): Response object including a JSON description of the current user Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/user/current\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving current user: {} \" . format ( e ))","title":"get_current_user()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_linked_cases","text":":param case_id: Case identifier :return: TheHive case(s) :rtype: json Source code in thehive4py/api.py 505 506 507 508 509 510 511 512 513 514 515 516 def get_linked_cases ( self , case_id ): \"\"\" :param case_id: Case identifier :return: TheHive case(s) :rtype: json \"\"\" req = self . url + \"/api/case/ {} /links\" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Linked cases fetch error: {} \" . format ( e ))","title":"get_linked_cases()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_log","text":":param log_id: Task log identifier :return: TheHive task log by id :rtype: json Source code in thehive4py/api.py 612 613 614 615 616 617 618 619 620 621 622 623 def get_task_log ( self , log_id ): \"\"\" :param log_id: Task log identifier :return: TheHive task log by id :rtype: json \"\"\" req = self . url + \"/api/case/task/log/ {} \" . format ( log_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e ))","title":"get_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_logs","text":":param task_id: Task identifier :return: TheHive logs :rtype: json Source code in thehive4py/api.py 625 626 627 628 629 630 631 632 633 634 635 636 637 def get_task_logs ( self , task_id ): \"\"\" :param task_id: Task identifier :return: TheHive logs :rtype: json \"\"\" req = self . url + \"/api/case/task/ {} /log\" . format ( task_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e ))","title":"get_task_logs()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.health","text":"Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call. Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def health ( self ): \"\"\" Method to call the /api/health endpoint Returns: Response object resulting from the API call. Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/health\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving health status: {} \" . format ( e ))","title":"health()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_read","text":"Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return: Source code in thehive4py/api.py 655 656 657 658 659 660 661 662 663 664 665 666 def mark_alert_as_read ( self , alert_id ): \"\"\" Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return: \"\"\" req = self . url + \"/api/alert/ {} /markAsRead\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise AlertException ( \"Mark alert as read error: {} \" . format ( e ))","title":"mark_alert_as_read()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_unread","text":"Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return: Source code in thehive4py/api.py 668 669 670 671 672 673 674 675 676 677 678 679 def mark_alert_as_unread ( self , alert_id ): \"\"\" Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return: \"\"\" req = self . url + \"/api/alert/ {} /markAsUnread\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise AlertException ( \"Mark alert as unread error: {} \" . format ( e ))","title":"mark_alert_as_unread()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.promote_alert_to_case","text":"This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json Source code in thehive4py/api.py 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 def promote_alert_to_case ( self , alert_id , case_template = None ): \"\"\" This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json \"\"\" req = self . url + \"/api/alert/ {} /createCase\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert , data = json . dumps ({ \"caseTemplate\" : case_template })) except requests . exceptions . RequestException as the_exception : raise AlertException ( \"Couldn't promote alert to case: {} \" . format ( the_exception )) return None","title":"promote_alert_to_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.run_analyzer","text":":param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json Source code in thehive4py/api.py 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 def run_analyzer ( self , cortex_id , artifact_id , analyzer_id ): \"\"\" :param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json \"\"\" req = self . url + \"/api/connector/cortex/job\" try : data = json . dumps ({ \"cortexId\" : cortex_id , \"artifactId\" : artifact_id , \"analyzerId\" : analyzer_id }) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Analyzer run error: {} \" . format ( e ))","title":"run_analyzer()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_alert","text":"Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: Source code in thehive4py/api.py 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 def update_alert ( self , alert_id , alert , fields = []): \"\"\" Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) # update only the alert attributes that are not read-only update_keys = [ 'tlp' , 'severity' , 'tags' , 'caseTemplate' , 'title' , 'description' , 'customFields' ] if len ( fields ) > 0 : data = { k : v for k , v in alert . __dict__ . items () if k in fields } else : data = { k : v for k , v in alert . __dict__ . items () if k in update_keys } if hasattr ( data , 'artifacts' ): data [ 'artifacts' ] = [ a . __dict__ for a in alert . artifacts ] try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise AlertException ( \"Alert update error: {} \" . format ( e ))","title":"update_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case","text":"Update a case. Parameters: Name Type Description Default case The case to update. The case's id determines which case to update. required fields Optional parameter, an array of fields names, the ones we want to update [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 def update_case ( self , case , fields = []): \"\"\" Update a case. Arguments: case: The case to update. The case's `id` determines which case to update. fields: Optional parameter, an array of fields names, the ones we want to update Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/ {} \" . format ( case . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'severity' , 'startDate' , 'owner' , 'flag' , 'tlp' , 'pap' , 'tags' , 'status' , 'resolutionStatus' , 'impactStatus' , 'summary' , 'endDate' , 'metrics' , 'customFields' ] data = { k : v for k , v in case . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException : raise CaseException ( \"Case update error: {} \" . format ( e ))","title":"update_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observable","text":"Update an existing case observable Parameters: Name Type Description Default observable_id Observable identifier required case_observable CaseObservable TheHive observable as defined in models.py required Returns: Type Description response (requests.Response) Response object including a JSON description of the updated case observable Exceptions: Type Description CaseObservableException An error occured during case observable creation Source code in thehive4py/api.py 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def update_case_observable ( self , observable_id , case_observable ): \"\"\" Update an existing case observable Arguments: observable_id: Observable identifier case_observable (CaseObservable): TheHive observable as defined in models.py Returns: response (requests.Response): Response object including a JSON description of the updated case observable Raises: CaseObservableException: An error occured during case observable creation \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) try : data = json . dumps ({ \"message\" : case_observable . message , \"tlp\" : case_observable . tlp , \"tags\" : case_observable . tags , \"ioc\" : case_observable . ioc , \"sighted\" : case_observable . sighted }) return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable update error: {} \" . format ( e ))","title":"update_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observables","text":":Updates TheHive observable :param observable: The observable details to update :return: Source code in thehive4py/api.py 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 def update_case_observables ( self , observable , fields = []): \"\"\" :Updates TheHive observable :param observable: The observable details to update :return: \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable . id ) # Choose which attributes to send update_keys = [ 'tlp' , 'ioc' , 'flag' , 'sighted' , 'tags' , 'message' ] data = { k : v for k , v in observable . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case observable update error: {} \" . format ( e ))","title":"update_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_task","text":"Update a case task Parameters: Name Type Description Default task CaseTask Case task object as described in model.py required fields array Arry of strings representing CaseTask properties to be updated [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def update_case_task ( self , task , fields = []): \"\"\" Update a case task Arguments: task (CaseTask): Case task object as described in model.py fields (array): Arry of strings representing CaseTask properties to be updated Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'status' , 'order' , 'user' , 'owner' , 'flag' , 'endDate' ] data = { k : v for k , v in task . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task update error: {} \" . format ( e ))","title":"update_case_task()"},{"location":"reference/auth/","text":"Auth # # BasicAuth # A custom basic authentication class for requests, that takes into account the organisation header __init__ ( self , username , password , organisation = None ) special # Constructor Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 10 11 12 13 14 15 16 17 18 19 20 21 def __init__ ( self , username , password , organisation = None ): \"\"\" Constructor Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation BearerAuth # A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header __init__ ( self , api_key , organisation = None ) special # Constructor Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , api_key , organisation = None ): \"\"\" Constructor Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"Authentication"},{"location":"reference/auth/#auth","text":"","title":"Auth"},{"location":"reference/auth/#thehive4py.auth","text":"","title":"thehive4py.auth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth","text":"A custom basic authentication class for requests, that takes into account the organisation header","title":"BasicAuth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth.__init__","text":"Constructor Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 10 11 12 13 14 15 16 17 18 19 20 21 def __init__ ( self , username , password , organisation = None ): \"\"\" Constructor Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation","title":"__init__()"},{"location":"reference/auth/#thehive4py.auth.BearerAuth","text":"A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header","title":"BearerAuth"},{"location":"reference/auth/#thehive4py.auth.BearerAuth.__init__","text":"Constructor Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 37 38 39 40 41 42 43 44 45 46 def __init__ ( self , api_key , organisation = None ): \"\"\" Constructor Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"__init__()"},{"location":"reference/exceptions/","text":"Exceptions # # AlertException # Exception raised by failure of API calls related to Alert handling CaseException # Exception raised by failure of API calls related to Case handling CaseObservableException # Exception raised by failure of API calls related to Case Observable handling CaseTaskException # Exception raised by failure of API calls related to Case Task handling CaseTemplateException # Exception raised by failure of API calls related to Case Template handling CustomFieldException # Exception raised by failure of API calls related to Custom Fields handling TheHiveException # Base class for TheHive exceptions","title":"Exceptions"},{"location":"reference/exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions","text":"","title":"thehive4py.exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions.AlertException","text":"Exception raised by failure of API calls related to Alert handling","title":"AlertException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseException","text":"Exception raised by failure of API calls related to Case handling","title":"CaseException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseObservableException","text":"Exception raised by failure of API calls related to Case Observable handling","title":"CaseObservableException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTaskException","text":"Exception raised by failure of API calls related to Case Task handling","title":"CaseTaskException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTemplateException","text":"Exception raised by failure of API calls related to Case Template handling","title":"CaseTemplateException"},{"location":"reference/exceptions/#thehive4py.exceptions.CustomFieldException","text":"Exception raised by failure of API calls related to Custom Fields handling","title":"CustomFieldException"},{"location":"reference/exceptions/#thehive4py.exceptions.TheHiveException","text":"Base class for TheHive exceptions","title":"TheHiveException"},{"location":"reference/models/","text":"Models # # CaseHelper # Provides helper methods for interacting with instances of the Case class. __call__ ( self , id ) special # Return an instance of Case with the given case ID. :param id: ID of a case to retrieve. __init__ ( self , thehive ) special # Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance. create ( self , title , description , ** kwargs ) # Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance. status_ok ( status_code ) staticmethod # Check whether a status code is OK update ( self , case_id , ** attributes ) # Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance. CustomField # __init__ ( self , ** attributes ) special # Class that represents a single custom field :param name: name of the custom field :param reference: internal reference name :param description: description of the custom field :param type: type of the field, possible values are string, boolean, number or date :param options: list of possible values for the field :param mandatory: True if the field is mandatory CustomJsonEncoder # default ( self , o ) # Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"Models"},{"location":"reference/models/#models","text":"","title":"Models"},{"location":"reference/models/#thehive4py.models","text":"","title":"thehive4py.models"},{"location":"reference/models/#thehive4py.models.CaseHelper","text":"Provides helper methods for interacting with instances of the Case class.","title":"CaseHelper"},{"location":"reference/models/#thehive4py.models.CaseHelper.__call__","text":"Return an instance of Case with the given case ID. :param id: ID of a case to retrieve.","title":"__call__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.__init__","text":"Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance.","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.create","text":"Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance.","title":"create()"},{"location":"reference/models/#thehive4py.models.CaseHelper.status_ok","text":"Check whether a status code is OK","title":"status_ok()"},{"location":"reference/models/#thehive4py.models.CaseHelper.update","text":"Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance.","title":"update()"},{"location":"reference/models/#thehive4py.models.CustomField","text":"","title":"CustomField"},{"location":"reference/models/#thehive4py.models.CustomField.__init__","text":"Class that represents a single custom field :param name: name of the custom field :param reference: internal reference name :param description: description of the custom field :param type: type of the field, possible values are string, boolean, number or date :param options: list of possible values for the field :param mandatory: True if the field is mandatory","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder","text":"","title":"CustomJsonEncoder"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder.default","text":"Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/query/","text":"Query # #","title":"Query DSL"},{"location":"reference/query/#query","text":"","title":"Query"},{"location":"reference/query/#thehive4py.query","text":"","title":"thehive4py.query"},{"location":"samples/admin-operations/","text":"Missing TODO","title":"Admin operations"},{"location":"samples/alert-operations/","text":"Create alert # An example showing how to create an alert with observables and custom fields. import requests import sys import json import time import uuid from thehive4py.api import TheHiveApi from thehive4py.models import Alert , AlertArtifact , CustomFieldHelper api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Prepare observables artifacts = [ AlertArtifact ( dataType = 'ip' , data = '8.8.8.8' ), AlertArtifact ( dataType = 'domain' , data = 'google.com' ), AlertArtifact ( dataType = 'file' , data = 'pic.png' ), AlertArtifact ( dataType = 'file' , data = 'sample.txt' , sighted = True , ioc = True ) ] # Prepare custom fields customFields = CustomFieldHelper () \\ . add_string ( 'business-unit' , 'HR' ) \\ . add_string ( 'business-impact' , 'HIGH' ) \\ . add_date ( 'occur-date' , int ( time . time ()) * 1000 ) \\ . add_number ( 'cvss' , 6 ) \\ . build () # Prepare the sample Alert sourceRef = str ( uuid . uuid4 ())[ 0 : 6 ] alert = Alert ( title = 'New Alert' , tlp = 3 , tags = [ 'TheHive4Py' , 'sample' ], description = 'N/A' , type = 'external' , source = 'instance1' , sourceRef = sourceRef , artifacts = artifacts , customFields = customFields ) # Create the alert try : response = api . create_alert ( alert ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) except AlertException as e : print ( \"Alert create error: {} \" . format ( e )) # Exit the program sys . exit ( 0 ) Get an Alert by ID # Missing TODO Search alerts # Missing TODO Promote an alert # Missing TODO","title":"Alert operations"},{"location":"samples/alert-operations/#create-alert","text":"An example showing how to create an alert with observables and custom fields. import requests import sys import json import time import uuid from thehive4py.api import TheHiveApi from thehive4py.models import Alert , AlertArtifact , CustomFieldHelper api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Prepare observables artifacts = [ AlertArtifact ( dataType = 'ip' , data = '8.8.8.8' ), AlertArtifact ( dataType = 'domain' , data = 'google.com' ), AlertArtifact ( dataType = 'file' , data = 'pic.png' ), AlertArtifact ( dataType = 'file' , data = 'sample.txt' , sighted = True , ioc = True ) ] # Prepare custom fields customFields = CustomFieldHelper () \\ . add_string ( 'business-unit' , 'HR' ) \\ . add_string ( 'business-impact' , 'HIGH' ) \\ . add_date ( 'occur-date' , int ( time . time ()) * 1000 ) \\ . add_number ( 'cvss' , 6 ) \\ . build () # Prepare the sample Alert sourceRef = str ( uuid . uuid4 ())[ 0 : 6 ] alert = Alert ( title = 'New Alert' , tlp = 3 , tags = [ 'TheHive4Py' , 'sample' ], description = 'N/A' , type = 'external' , source = 'instance1' , sourceRef = sourceRef , artifacts = artifacts , customFields = customFields ) # Create the alert try : response = api . create_alert ( alert ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) except AlertException as e : print ( \"Alert create error: {} \" . format ( e )) # Exit the program sys . exit ( 0 )","title":"Create alert"},{"location":"samples/alert-operations/#get-an-alert-by-id","text":"Missing TODO","title":"Get an Alert by ID"},{"location":"samples/alert-operations/#search-alerts","text":"Missing TODO","title":"Search alerts"},{"location":"samples/alert-operations/#promote-an-alert","text":"Missing TODO","title":"Promote an alert"},{"location":"samples/case-operations/","text":"Create a case # Missing TODO Get a case by ID # Missing TODO Find a case using few criteria # Missing TODO Search for cases # Missing TODO Update a case # Missing TODO Search cases by observable # Missing TODO Close a case # Missing TODO","title":"Case operations"},{"location":"samples/case-operations/#create-a-case","text":"Missing TODO","title":"Create a case"},{"location":"samples/case-operations/#get-a-case-by-id","text":"Missing TODO","title":"Get a case by ID"},{"location":"samples/case-operations/#find-a-case-using-few-criteria","text":"Missing TODO","title":"Find a case using few criteria"},{"location":"samples/case-operations/#search-for-cases","text":"Missing TODO","title":"Search for cases"},{"location":"samples/case-operations/#update-a-case","text":"Missing TODO","title":"Update a case"},{"location":"samples/case-operations/#search-cases-by-observable","text":"Missing TODO","title":"Search cases by observable"},{"location":"samples/case-operations/#close-a-case","text":"Missing TODO","title":"Close a case"},{"location":"samples/observable-operations/","text":"Create a file observable # import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable # Init the CaseObserablae object file_observable = CaseObservable ( dataType = 'file' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , file_observable ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 ) Create a domain observable # import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable # Init the CaseObserablae object domain = CaseObservable ( dataType = 'filename' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , domain ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 ) Get all observables of a given case # Missing TODO Search ip observables of a given case # Missing TODO","title":"Observable operations"},{"location":"samples/observable-operations/#create-a-file-observable","text":"import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable # Init the CaseObserablae object file_observable = CaseObservable ( dataType = 'file' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , file_observable ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Create a file observable"},{"location":"samples/observable-operations/#create-a-domain-observable","text":"import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable # Init the CaseObserablae object domain = CaseObservable ( dataType = 'filename' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , domain ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Create a domain observable"},{"location":"samples/observable-operations/#get-all-observables-of-a-given-case","text":"Missing TODO","title":"Get all observables of a given case"},{"location":"samples/observable-operations/#search-ip-observables-of-a-given-case","text":"Missing TODO","title":"Search ip observables of a given case"},{"location":"samples/task-operations/","text":"Missing TODO","title":"Task operations"}]}