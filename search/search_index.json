{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TheHive4py # TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template. Installation # On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command. Use It # On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command. License # TheHive4py is an open source and free software released under the AGPL (Affero General Public License). We, TheHive Project, are committed to ensure that TheHive4py will remain a free and open source project on the long-run. Updates # Information, news and updates are regularly posted on TheHive Project Twitter account and on the blog . Contributing # We welcome your contributions. Please feel free to fork the code, play with it, make some patches and send us pull requests using issues . We do have a Code of conduct . Make sure to check it out before contributing. Support # Please open an issue on GitHub if you'd like to report a bug or request a feature. We are also available on Gitter to help you out. If you need to contact the project team, send an email to support@thehive-project.org . Community Discussions # We have set up a Google forum at https://groups.google.com/a/thehive-project.org/d/forum/users . To request access, you need a Google account. You may create one using a Gmail address or without one . Website # https://thehive-project.org/","title":"Home"},{"location":"#thehive4py","text":"TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template.","title":"TheHive4py"},{"location":"#installation","text":"On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command.","title":"Installation"},{"location":"#use-it","text":"On macOS and Linux, type: sudo pip install thehive4py If you are using Python on a Windows operating system, please forgo the sudo command.","title":"Use It"},{"location":"#license","text":"TheHive4py is an open source and free software released under the AGPL (Affero General Public License). We, TheHive Project, are committed to ensure that TheHive4py will remain a free and open source project on the long-run.","title":"License"},{"location":"#updates","text":"Information, news and updates are regularly posted on TheHive Project Twitter account and on the blog .","title":"Updates"},{"location":"#contributing","text":"We welcome your contributions. Please feel free to fork the code, play with it, make some patches and send us pull requests using issues . We do have a Code of conduct . Make sure to check it out before contributing.","title":"Contributing"},{"location":"#support","text":"Please open an issue on GitHub if you'd like to report a bug or request a feature. We are also available on Gitter to help you out. If you need to contact the project team, send an email to support@thehive-project.org .","title":"Support"},{"location":"#community-discussions","text":"We have set up a Google forum at https://groups.google.com/a/thehive-project.org/d/forum/users . To request access, you need a Google account. You may create one using a Gmail address or without one .","title":"Community Discussions"},{"location":"#website","text":"https://thehive-project.org/","title":"Website"},{"location":"changelog/","text":"Change Log # 1.7.0 (2020-05-29) # Full Changelog Implemented enhancements: Add custom field support for new types #152 Return type is not correctly filled #150 Models Case and CaseTemplate don't have PAP attribute #127 Improve jsonify function to allow excluding attributes #125 Fixed bugs: Add support to datetime for \"date\" CustomFields #138 Update alert using 'fields' is not working #130 Models should have the attribute 'id' #120 promote_alert_to_case() doesn't apply caseTemplate #114 PAP flag missing when creating a case from a retrieved Case object #111 Specify an optional case template parameter to promote_alert_to_case #115 ( agix ) Closed issues: Add support to like and wildcard operators #149 FR: Get \"task name\" in an \"case_task_log\" event #148 Create case with the hive 4 rc1 #144 Is TheHive4py still alive? #141 Add ioc and sighted attributes to case and alert artifacts #126 support for case template deletion/creation #124 Create update_case_observable #121 Example python create case with observables #113 Alert create error: ('Connection aborted.', error(104, 'Connection reset by peer') #109 Requesting analyzer report from cortex with thehive4py #107 Merged pull requests: Add support for case delete, creating custom fields and create case templates #146 ( aurelienhess ) Support for json datetime #139 ( ehooo ) Added IDs in all models #123 ( mgabriel-silva ) Added update_case_observable #122 ( mgabriel-silva ) Added support for custom owner on Case creation #118 ( victorvillar ) 1.6.0 (2018-12-17) # Full Changelog Merged pull requests: Implement some more functions #96 ( jojoob ) Create new sample bulk-alert-merge-to-case.py #95 ( david-burkett ) Update observable #94 ( joseluratm ) 1.5.3 (2018-11-16) # Full Changelog Fixed bugs: Unable to close case as TruePositive WithImpact #93 1.5.2 (2018-11-12) # Full Changelog Fixed bugs: Support task-groups for tasks (e.g. creation of Cases) #91 Closed issues: Unknown attribute alert.customFields when creating alert in version 1.5.1 #88 Merged pull requests: support for task group names #92 ( crackytsi ) 1.5.1 (2018-10-10) # Full Changelog Implemented enhancements: Add customFields to Alert #87 ( zpriddy ) 1.5.0 (2018-09-25) # Full Changelog Closed issues: Update observable #7 Update task #6 Add a simple template search method #83 Max recursion depth exceeded error #82 Merged pull requests: Feature/promote alert to case #86 ( uplateandonline ) Feature/search templates #84 ( uplateandonline ) Prevent max recursion depth exceeded error #80 ( Psynbiotik ) added search support for tasks #79 ( neok0 ) 1.4.4 (2018-07-02) # Full Changelog Fixed bugs: Missing parameter _field in Between function #71 ( tagashy ) Closed issues: Retrieve analyzer report after analysis [question] #75 Keep analyzer reports when merging a case #73 Unify the naming of statuses and filters #70 Merged pull requests: Add support for alert markAsRead/Unread #74 ( itsnotapt ) Add Support for update_case_tasks method #63 ( billmurrin ) 1.4.3 (2018-02-07) # Full Changelog Implemented enhancements: add update_alert to allow updating an alert #61 ( Rolinh ) Fixed bugs: How to close a case via API #67 CustomFields are not updated in update_case #66 Correction in update_case usage #57 Merged pull requests: fix spelling of exception #58 ( billmurrin ) created get_linked_cases method in api #60 ( billmurrin ) 1.4.2 (2017-12-27) # Full Changelog Implemented enhancements: Raise custom exceptions from api methods instead of calling sys.exit #55 Merged pull requests: Add Sighted Support to the Observable Model #54 ( billmurrin ) 1.4.1 (2017-12-19) # Full Changelog Merged pull requests: fix get_case_observables method #53 ( billmurrin ) 1.4.0 (2017-12-05) # Full Changelog Implemented enhancements: Provide just the template name when creating a case from a template #45 Add support of custom fields to the case model #39 Case helper #37 ( npratley ) Fixed bugs: Error updating case #51 Closed issues: Add a query builder capabilities #49 Run Cortex analyzer through api #40 Update case #5 Merged pull requests: Added missing attributes to the Case class. #50 ( npratley ) Added the functionality to run a Cortex analyzer on an observable #44 ( alexgoedeke ) Added get_task_logs method #42 ( billmurrin ) Added a method to update a case. #41 ( npratley ) 1.3.1 (2017-09-17) # Full Changelog Fixed bugs: Basic auth doesn't work with version 1.3.0 #38 1.3.0 (2017-09-15) # Full Changelog Implemented enhancements: Allow specifying range to return > 10 cases, observables, etc., #30 fix two cases of bad indentation in exception handling code #26 ( Rolinh ) fix default severity level of an alert #25 ( Rolinh ) Fixed bugs: certificate verify option not included in create_case_task #27 Closed issues: Add an API method to create users #33 Feature Request - Task Log Template/Boilerplate Text #32 Add support to authentication by API key #36 Add a find_alerts method to search for alerts #31 Merged pull requests: Added verify parameter to calls #28 ( billmurrin ) 1.2.3 (2017-07-20) # Full Changelog Implemented enhancements: Adding option for an Internal CA #24 Merged pull requests: Find first #23 ( 3c7 ) 1.2.2 (2017-07-06) # Full Changelog Fixed bugs: Remove print calls from TheHiveApi.find_cases method #22 1.2.1 (2017-06-29) # Full Changelog Fixed bugs: Fix the issue related to wrong base64 decoding when creating alerts #20 python-magic dependency not in setup.py #19 \"future\" dependency not documented in requirements.txt #18 Merged pull requests: Install python-magic package on setup #16 ( ilyaglow ) 1.2.0 (2017-05-12) # Full Changelog Closed issues: Add the ability to create a TheHive alert #13 Merged pull requests: Added ability to find tasks by caseId #11 ( AverageS ) 1.1.1 (2017-05-11) # Full Changelog Fixed bugs: Use basic auth when calling TheHive apis #14 1.1.0 (2017-03-23) # Full Changelog Implemented enhancements: Search for cases #4 Add observables to a case #3 1.0.1 (2017-03-08) # Full Changelog Fixed bugs: Issue creating a cases without metrics and without case template #8 1.0.0 (2017-03-08) # Closed issues: 2nd typo in setup.py #2 Typo in setup.py #1 * This Change Log was automatically generated by github_changelog_generator","title":"Change log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#170-2020-05-29","text":"Full Changelog Implemented enhancements: Add custom field support for new types #152 Return type is not correctly filled #150 Models Case and CaseTemplate don't have PAP attribute #127 Improve jsonify function to allow excluding attributes #125 Fixed bugs: Add support to datetime for \"date\" CustomFields #138 Update alert using 'fields' is not working #130 Models should have the attribute 'id' #120 promote_alert_to_case() doesn't apply caseTemplate #114 PAP flag missing when creating a case from a retrieved Case object #111 Specify an optional case template parameter to promote_alert_to_case #115 ( agix ) Closed issues: Add support to like and wildcard operators #149 FR: Get \"task name\" in an \"case_task_log\" event #148 Create case with the hive 4 rc1 #144 Is TheHive4py still alive? #141 Add ioc and sighted attributes to case and alert artifacts #126 support for case template deletion/creation #124 Create update_case_observable #121 Example python create case with observables #113 Alert create error: ('Connection aborted.', error(104, 'Connection reset by peer') #109 Requesting analyzer report from cortex with thehive4py #107 Merged pull requests: Add support for case delete, creating custom fields and create case templates #146 ( aurelienhess ) Support for json datetime #139 ( ehooo ) Added IDs in all models #123 ( mgabriel-silva ) Added update_case_observable #122 ( mgabriel-silva ) Added support for custom owner on Case creation #118 ( victorvillar )","title":"1.7.0 (2020-05-29)"},{"location":"changelog/#160-2018-12-17","text":"Full Changelog Merged pull requests: Implement some more functions #96 ( jojoob ) Create new sample bulk-alert-merge-to-case.py #95 ( david-burkett ) Update observable #94 ( joseluratm )","title":"1.6.0 (2018-12-17)"},{"location":"changelog/#153-2018-11-16","text":"Full Changelog Fixed bugs: Unable to close case as TruePositive WithImpact #93","title":"1.5.3 (2018-11-16)"},{"location":"changelog/#152-2018-11-12","text":"Full Changelog Fixed bugs: Support task-groups for tasks (e.g. creation of Cases) #91 Closed issues: Unknown attribute alert.customFields when creating alert in version 1.5.1 #88 Merged pull requests: support for task group names #92 ( crackytsi )","title":"1.5.2 (2018-11-12)"},{"location":"changelog/#151-2018-10-10","text":"Full Changelog Implemented enhancements: Add customFields to Alert #87 ( zpriddy )","title":"1.5.1 (2018-10-10)"},{"location":"changelog/#150-2018-09-25","text":"Full Changelog Closed issues: Update observable #7 Update task #6 Add a simple template search method #83 Max recursion depth exceeded error #82 Merged pull requests: Feature/promote alert to case #86 ( uplateandonline ) Feature/search templates #84 ( uplateandonline ) Prevent max recursion depth exceeded error #80 ( Psynbiotik ) added search support for tasks #79 ( neok0 )","title":"1.5.0 (2018-09-25)"},{"location":"changelog/#144-2018-07-02","text":"Full Changelog Fixed bugs: Missing parameter _field in Between function #71 ( tagashy ) Closed issues: Retrieve analyzer report after analysis [question] #75 Keep analyzer reports when merging a case #73 Unify the naming of statuses and filters #70 Merged pull requests: Add support for alert markAsRead/Unread #74 ( itsnotapt ) Add Support for update_case_tasks method #63 ( billmurrin )","title":"1.4.4 (2018-07-02)"},{"location":"changelog/#143-2018-02-07","text":"Full Changelog Implemented enhancements: add update_alert to allow updating an alert #61 ( Rolinh ) Fixed bugs: How to close a case via API #67 CustomFields are not updated in update_case #66 Correction in update_case usage #57 Merged pull requests: fix spelling of exception #58 ( billmurrin ) created get_linked_cases method in api #60 ( billmurrin )","title":"1.4.3 (2018-02-07)"},{"location":"changelog/#142-2017-12-27","text":"Full Changelog Implemented enhancements: Raise custom exceptions from api methods instead of calling sys.exit #55 Merged pull requests: Add Sighted Support to the Observable Model #54 ( billmurrin )","title":"1.4.2 (2017-12-27)"},{"location":"changelog/#141-2017-12-19","text":"Full Changelog Merged pull requests: fix get_case_observables method #53 ( billmurrin )","title":"1.4.1 (2017-12-19)"},{"location":"changelog/#140-2017-12-05","text":"Full Changelog Implemented enhancements: Provide just the template name when creating a case from a template #45 Add support of custom fields to the case model #39 Case helper #37 ( npratley ) Fixed bugs: Error updating case #51 Closed issues: Add a query builder capabilities #49 Run Cortex analyzer through api #40 Update case #5 Merged pull requests: Added missing attributes to the Case class. #50 ( npratley ) Added the functionality to run a Cortex analyzer on an observable #44 ( alexgoedeke ) Added get_task_logs method #42 ( billmurrin ) Added a method to update a case. #41 ( npratley )","title":"1.4.0 (2017-12-05)"},{"location":"changelog/#131-2017-09-17","text":"Full Changelog Fixed bugs: Basic auth doesn't work with version 1.3.0 #38","title":"1.3.1 (2017-09-17)"},{"location":"changelog/#130-2017-09-15","text":"Full Changelog Implemented enhancements: Allow specifying range to return > 10 cases, observables, etc., #30 fix two cases of bad indentation in exception handling code #26 ( Rolinh ) fix default severity level of an alert #25 ( Rolinh ) Fixed bugs: certificate verify option not included in create_case_task #27 Closed issues: Add an API method to create users #33 Feature Request - Task Log Template/Boilerplate Text #32 Add support to authentication by API key #36 Add a find_alerts method to search for alerts #31 Merged pull requests: Added verify parameter to calls #28 ( billmurrin )","title":"1.3.0 (2017-09-15)"},{"location":"changelog/#123-2017-07-20","text":"Full Changelog Implemented enhancements: Adding option for an Internal CA #24 Merged pull requests: Find first #23 ( 3c7 )","title":"1.2.3 (2017-07-20)"},{"location":"changelog/#122-2017-07-06","text":"Full Changelog Fixed bugs: Remove print calls from TheHiveApi.find_cases method #22","title":"1.2.2 (2017-07-06)"},{"location":"changelog/#121-2017-06-29","text":"Full Changelog Fixed bugs: Fix the issue related to wrong base64 decoding when creating alerts #20 python-magic dependency not in setup.py #19 \"future\" dependency not documented in requirements.txt #18 Merged pull requests: Install python-magic package on setup #16 ( ilyaglow )","title":"1.2.1 (2017-06-29)"},{"location":"changelog/#120-2017-05-12","text":"Full Changelog Closed issues: Add the ability to create a TheHive alert #13 Merged pull requests: Added ability to find tasks by caseId #11 ( AverageS )","title":"1.2.0 (2017-05-12)"},{"location":"changelog/#111-2017-05-11","text":"Full Changelog Fixed bugs: Use basic auth when calling TheHive apis #14","title":"1.1.1 (2017-05-11)"},{"location":"changelog/#110-2017-03-23","text":"Full Changelog Implemented enhancements: Search for cases #4 Add observables to a case #3","title":"1.1.0 (2017-03-23)"},{"location":"changelog/#101-2017-03-08","text":"Full Changelog Fixed bugs: Issue creating a cases without metrics and without case template #8","title":"1.0.1 (2017-03-08)"},{"location":"changelog/#100-2017-03-08","text":"Closed issues: 2nd typo in setup.py #2 Typo in setup.py #1 * This Change Log was automatically generated by github_changelog_generator","title":"1.0.0 (2017-03-08)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct # Our Pledge # In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards # Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities # Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior, in compliance with the licensing terms applying to the Project developments. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. However, these actions shall respect the licensing terms of the Project Developments that will always supersede such Code of Conduct. Scope # This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement # Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@thehive-project.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution # This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4 This version includes a clarification to ensure that the code of conduct is in compliance with the free software licensing terms of the project.","title":"Code of conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior, in compliance with the licensing terms applying to the Project developments. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. However, these actions shall respect the licensing terms of the Project Developments that will always supersede such Code of Conduct.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@thehive-project.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4 This version includes a clarification to ensure that the code of conduct is in compliance with the free software licensing terms of the project.","title":"Attribution"},{"location":"reference/api/","text":"API # This is the reference of all the methods available on thehive4py.api.TheHiveApi . # TheHiveApi # __init__ ( self , url , principal , organisation = None , password = None , proxies = {}, cert = True ) special # Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None organisation str The name of the organisation against which api calls will be run. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True ??? note \"Basic example\" Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation ```python api = TheHiveApi('http://my_thehive:9000', 'my_api_key') ``` ??? note \"Full example\" Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate ```python proxies = { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } api = TheHiveApi('http://my_thehive:9000', 'my_api_key', organisation='my-org', proxies=proxies, cert=True ) ``` create_alert ( self , alert ) # :param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response create_case ( self , case ) # :param case: The case details :type case: Case defined in models.py :return: TheHive case :rtype: requests.Response create_case_observable ( self , case_id , case_observable ) # :param case_id: Case identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: requests.Response create_case_task ( self , case_id , case_task ) # :param case_id: Case identifier :param case_task: TheHive task :type case_task: CaseTask defined in models.py :return: TheHive task :rtype: requests.Response create_case_template ( self , case_template ) # :param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse create_custom_field ( self , custom_field ) # This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py create_task_log ( self , task_id , case_task_log ) # :param task_id: Task identifier :param case_task_log: TheHive log :type case_task_log: CaseTaskLog defined in models.py :return: TheHive log :rtype: requests.Response delete_case ( self , case_id , force = False ) # Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). :param case_id: Case identifier :return: A requests response object. find_alerts ( self , ** attributes ) # :return: list of Alerts :rtype: json find_case_templates ( self , ** attributes ) # :return: list of case templates :rtype: json find_first ( self , ** attributes ) # :return: first case of result set given by query :rtype: dict find_tasks ( self , ** attributes ) # :return: list of Tasks :rtype: json get_alert ( self , alert_id ) # :param alert_id: Alert identifier :return: TheHive Alert :rtype: json get_case ( self , case_id ) # :param case_id: Case identifier :return: TheHive case :rtype: json get_case_observables ( self , case_id , ** attributes ) # :param case_id: Case identifier :return: list of observables ;rtype: json get_case_task ( self , task_id ) # :param task_id: Task identifier :return: TheHive task by id :rtype: json get_case_template ( self , name ) # :param name: Case template name :return: TheHive case template :rtype: json get_current_user ( self ) # Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description Response object resulting from the API call. get_linked_cases ( self , case_id ) # :param case_id: Case identifier :return: TheHive case(s) :rtype: json get_task_log ( self , log_id ) # :param log_id: Task log identifier :return: TheHive task log by id :rtype: json get_task_logs ( self , task_id ) # :param task_id: Task identifier :return: TheHive logs :rtype: json health ( self ) # Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call. mark_alert_as_read ( self , alert_id ) # Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return: mark_alert_as_unread ( self , alert_id ) # Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return: promote_alert_to_case ( self , alert_id , case_template = None ) # This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json run_analyzer ( self , cortex_id , artifact_id , analyzer_id ) # :param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json update_alert ( self , alert_id , alert , fields = []) # Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: update_case ( self , case , fields = []) # Update a case. :param case: The case to update. The case's id determines which case to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return: update_case_observable ( self , observable_id , case_observable ) # :param observable_id: Observable identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: json update_case_observables ( self , observable , fields = []) # :Updates TheHive observable :param observable: The observable details to update :return: update_case_task ( self , task , fields = []) # :Updates TheHive Task :param case: The task to update. The task's id determines which Task to update. :return:","title":"API"},{"location":"reference/api/#api","text":"This is the reference of all the methods available on thehive4py.api.TheHiveApi .","title":"API"},{"location":"reference/api/#thehive4py.api","text":"","title":"thehive4py.api"},{"location":"reference/api/#thehive4py.api.TheHiveApi","text":"","title":"TheHiveApi"},{"location":"reference/api/#thehive4py.api.TheHiveApi.__init__","text":"Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None organisation str The name of the organisation against which api calls will be run. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True ??? note \"Basic example\" Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation ```python api = TheHiveApi('http://my_thehive:9000', 'my_api_key') ``` ??? note \"Full example\" Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate ```python proxies = { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } api = TheHiveApi('http://my_thehive:9000', 'my_api_key', organisation='my-org', proxies=proxies, cert=True ) ```","title":"__init__()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_alert","text":":param alert: TheHive alert :type alert: Alert defined in models.py :return: TheHive alert :rtype: requests.Response","title":"create_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case","text":":param case: The case details :type case: Case defined in models.py :return: TheHive case :rtype: requests.Response","title":"create_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_observable","text":":param case_id: Case identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: requests.Response","title":"create_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_task","text":":param case_id: Case identifier :param case_task: TheHive task :type case_task: CaseTask defined in models.py :return: TheHive task :rtype: requests.Response","title":"create_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_template","text":":param case_template: The case template :type case_template: CaseTemplate defined in models.py :return: TheHive case template :rtype: requests.Reponse","title":"create_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_custom_field","text":"This function is available only for TheHive 3 :param custom_field: CustomField defined in models.py","title":"create_custom_field()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_task_log","text":":param task_id: Task identifier :param case_task_log: TheHive log :type case_task_log: CaseTaskLog defined in models.py :return: TheHive log :rtype: requests.Response","title":"create_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_case","text":"Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). :param case_id: Case identifier :return: A requests response object.","title":"delete_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_alerts","text":":return: list of Alerts :rtype: json","title":"find_alerts()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_case_templates","text":":return: list of case templates :rtype: json","title":"find_case_templates()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_first","text":":return: first case of result set given by query :rtype: dict","title":"find_first()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_tasks","text":":return: list of Tasks :rtype: json","title":"find_tasks()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_alert","text":":param alert_id: Alert identifier :return: TheHive Alert :rtype: json","title":"get_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case","text":":param case_id: Case identifier :return: TheHive case :rtype: json","title":"get_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_observables","text":":param case_id: Case identifier :return: list of observables ;rtype: json","title":"get_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_task","text":":param task_id: Task identifier :return: TheHive task by id :rtype: json","title":"get_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_template","text":":param name: Case template name :return: TheHive case template :rtype: json","title":"get_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_current_user","text":"Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description Response object resulting from the API call.","title":"get_current_user()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_linked_cases","text":":param case_id: Case identifier :return: TheHive case(s) :rtype: json","title":"get_linked_cases()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_log","text":":param log_id: Task log identifier :return: TheHive task log by id :rtype: json","title":"get_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_logs","text":":param task_id: Task identifier :return: TheHive logs :rtype: json","title":"get_task_logs()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.health","text":"Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call.","title":"health()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_read","text":"Mark an alert as read. :param alert_id: The ID of the alert to mark as read. :return:","title":"mark_alert_as_read()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_unread","text":"Mark an alert as unread. :param alert_id: The ID of the alert to mark as unread. :return:","title":"mark_alert_as_unread()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.promote_alert_to_case","text":"This uses the TheHiveAPI to promote an alert to a case :param alert_id: Alert identifier :param case_template: Optional Case Template name :return: TheHive Case :rtype: json","title":"promote_alert_to_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.run_analyzer","text":":param cortex_id: identifier of the Cortex server :param artifact_id: identifier of the artifact as found with an artifact search :param analyzer_id: name of the analyzer used by the job :rtype: json","title":"run_analyzer()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_alert","text":"Update an alert. :param alert_id: The ID of the alert to update. :param data: The alert to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return:","title":"update_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case","text":"Update a case. :param case: The case to update. The case's id determines which case to update. :param fields: Optional parameter, an array of fields names, the ones we want to update :return:","title":"update_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observable","text":":param observable_id: Observable identifier :param case_observable: TheHive observable :type case_observable: CaseObservable defined in models.py :return: TheHive observable :rtype: json","title":"update_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observables","text":":Updates TheHive observable :param observable: The observable details to update :return:","title":"update_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_task","text":":Updates TheHive Task :param case: The task to update. The task's id determines which Task to update. :return:","title":"update_case_task()"},{"location":"reference/auth/","text":"Auth # # BasicAuth # __init__ ( self , username , password , organisation = None ) special # A custom basic authentication class for requests, that takes into account the organisation header Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 8 9 10 11 12 13 14 15 16 17 18 19 def __init__ ( self , username , password , organisation = None ): \"\"\" A custom basic authentication class for requests, that takes into account the organisation header Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation BearerAuth # __init__ ( self , api_key , organisation = None ) special # A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , api_key , organisation = None ): \"\"\" A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"Authentication"},{"location":"reference/auth/#auth","text":"","title":"Auth"},{"location":"reference/auth/#thehive4py.auth","text":"","title":"thehive4py.auth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth","text":"","title":"BasicAuth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth.__init__","text":"A custom basic authentication class for requests, that takes into account the organisation header Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 8 9 10 11 12 13 14 15 16 17 18 19 def __init__ ( self , username , password , organisation = None ): \"\"\" A custom basic authentication class for requests, that takes into account the organisation header Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation","title":"__init__()"},{"location":"reference/auth/#thehive4py.auth.BearerAuth","text":"","title":"BearerAuth"},{"location":"reference/auth/#thehive4py.auth.BearerAuth.__init__","text":"A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 32 33 34 35 36 37 38 39 40 41 42 def __init__ ( self , api_key , organisation = None ): \"\"\" A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"__init__()"},{"location":"reference/exceptions/","text":"Exceptions # # AlertException # Exception raised by failure of API calls related to Alert handling CaseException # Exception raised by failure of API calls related to Case handling CaseObservableException # Exception raised by failure of API calls related to Case Observable handling CaseTaskException # Exception raised by failure of API calls related to Case Task handling CaseTemplateException # Exception raised by failure of API calls related to Case Template handling CustomFieldException # Exception raised by failure of API calls related to Custom Fields handling TheHiveException # Base class for TheHive exceptions","title":"Exceptions"},{"location":"reference/exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions","text":"","title":"thehive4py.exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions.AlertException","text":"Exception raised by failure of API calls related to Alert handling","title":"AlertException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseException","text":"Exception raised by failure of API calls related to Case handling","title":"CaseException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseObservableException","text":"Exception raised by failure of API calls related to Case Observable handling","title":"CaseObservableException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTaskException","text":"Exception raised by failure of API calls related to Case Task handling","title":"CaseTaskException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTemplateException","text":"Exception raised by failure of API calls related to Case Template handling","title":"CaseTemplateException"},{"location":"reference/exceptions/#thehive4py.exceptions.CustomFieldException","text":"Exception raised by failure of API calls related to Custom Fields handling","title":"CustomFieldException"},{"location":"reference/exceptions/#thehive4py.exceptions.TheHiveException","text":"Base class for TheHive exceptions","title":"TheHiveException"},{"location":"reference/models/","text":"Models # # CaseHelper # Provides helper methods for interacting with instances of the Case class. __call__ ( self , id ) special # Return an instance of Case with the given case ID. :param id: ID of a case to retrieve. __init__ ( self , thehive ) special # Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance. create ( self , title , description , ** kwargs ) # Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance. status_ok ( status_code ) staticmethod # Check whether a status code is OK update ( self , case_id , ** attributes ) # Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance. CustomField # __init__ ( self , ** attributes ) special # Class that represents a single custom field :param name: name of the custom field :param reference: internal reference name :param description: description of the custom field :param type: type of the field, possible values are string, boolean, number or date :param options: list of possible values for the field :param mandatory: True if the field is mandatory CustomJsonEncoder # default ( self , o ) # Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"Models"},{"location":"reference/models/#models","text":"","title":"Models"},{"location":"reference/models/#thehive4py.models","text":"","title":"thehive4py.models"},{"location":"reference/models/#thehive4py.models.CaseHelper","text":"Provides helper methods for interacting with instances of the Case class.","title":"CaseHelper"},{"location":"reference/models/#thehive4py.models.CaseHelper.__call__","text":"Return an instance of Case with the given case ID. :param id: ID of a case to retrieve.","title":"__call__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.__init__","text":"Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance.","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.create","text":"Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance.","title":"create()"},{"location":"reference/models/#thehive4py.models.CaseHelper.status_ok","text":"Check whether a status code is OK","title":"status_ok()"},{"location":"reference/models/#thehive4py.models.CaseHelper.update","text":"Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance.","title":"update()"},{"location":"reference/models/#thehive4py.models.CustomField","text":"","title":"CustomField"},{"location":"reference/models/#thehive4py.models.CustomField.__init__","text":"Class that represents a single custom field :param name: name of the custom field :param reference: internal reference name :param description: description of the custom field :param type: type of the field, possible values are string, boolean, number or date :param options: list of possible values for the field :param mandatory: True if the field is mandatory","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder","text":"","title":"CustomJsonEncoder"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder.default","text":"Implement this method in a subclass such that it returns a serializable object for o , or calls the base implementation (to raise a TypeError ). For example, to support arbitrary iterators, you could implement default like this:: def default(self, o): !!! try iterable = iter(o) except TypeError: pass !!! else return list(iterable) # Let the base class default method raise the TypeError return JSONEncoder.default(self, o)","title":"default()"},{"location":"reference/query/","text":"Query # #","title":"Query DSL"},{"location":"reference/query/#query","text":"","title":"Query"},{"location":"reference/query/#thehive4py.query","text":"","title":"thehive4py.query"},{"location":"samples/admin-operations/","text":"Missing TODO","title":"Admin operations"},{"location":"samples/alert-operations/","text":"Create alert # An example showing how to create an alert with observables and custom fields. import requests import sys import json import time import uuid from thehive4py.api import TheHiveApi from thehive4py.models import Alert , AlertArtifact , CustomFieldHelper api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Prepare observables artifacts = [ AlertArtifact ( dataType = 'ip' , data = '8.8.8.8' ), AlertArtifact ( dataType = 'domain' , data = 'google.com' ), AlertArtifact ( dataType = 'file' , data = 'pic.png' ), AlertArtifact ( dataType = 'file' , data = 'sample.txt' , sighted = True , ioc = True ) ] # Prepare custom fields customFields = CustomFieldHelper () \\ . add_string ( 'business-unit' , 'HR' ) \\ . add_string ( 'business-impact' , 'HIGH' ) \\ . add_date ( 'occur-date' , int ( time . time ()) * 1000 ) \\ . add_number ( 'cvss' , 6 ) \\ . build () # Prepare the sample Alert sourceRef = str ( uuid . uuid4 ())[ 0 : 6 ] alert = Alert ( title = 'New Alert' , tlp = 3 , tags = [ 'TheHive4Py' , 'sample' ], description = 'N/A' , type = 'external' , source = 'instance1' , sourceRef = sourceRef , artifacts = artifacts , customFields = customFields ) # Create the alert try : response = api . create_alert ( alert ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) except AlertException as e : print ( \"Alert create error: {} \" . format ( e )) # Exit the program sys . exit ( 0 ) Get an Alert by ID # Missing TODO Search alerts # Missing TODO Promote an alert # Missing TODO","title":"Alert operations"},{"location":"samples/alert-operations/#create-alert","text":"An example showing how to create an alert with observables and custom fields. import requests import sys import json import time import uuid from thehive4py.api import TheHiveApi from thehive4py.models import Alert , AlertArtifact , CustomFieldHelper api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Prepare observables artifacts = [ AlertArtifact ( dataType = 'ip' , data = '8.8.8.8' ), AlertArtifact ( dataType = 'domain' , data = 'google.com' ), AlertArtifact ( dataType = 'file' , data = 'pic.png' ), AlertArtifact ( dataType = 'file' , data = 'sample.txt' , sighted = True , ioc = True ) ] # Prepare custom fields customFields = CustomFieldHelper () \\ . add_string ( 'business-unit' , 'HR' ) \\ . add_string ( 'business-impact' , 'HIGH' ) \\ . add_date ( 'occur-date' , int ( time . time ()) * 1000 ) \\ . add_number ( 'cvss' , 6 ) \\ . build () # Prepare the sample Alert sourceRef = str ( uuid . uuid4 ())[ 0 : 6 ] alert = Alert ( title = 'New Alert' , tlp = 3 , tags = [ 'TheHive4Py' , 'sample' ], description = 'N/A' , type = 'external' , source = 'instance1' , sourceRef = sourceRef , artifacts = artifacts , customFields = customFields ) # Create the alert try : response = api . create_alert ( alert ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) except AlertException as e : print ( \"Alert create error: {} \" . format ( e )) # Exit the program sys . exit ( 0 )","title":"Create alert"},{"location":"samples/alert-operations/#get-an-alert-by-id","text":"Missing TODO","title":"Get an Alert by ID"},{"location":"samples/alert-operations/#search-alerts","text":"Missing TODO","title":"Search alerts"},{"location":"samples/alert-operations/#promote-an-alert","text":"Missing TODO","title":"Promote an alert"},{"location":"samples/case-operations/","text":"Create a case # Missing TODO Get a case by ID # Missing TODO Find a case using few criteria # Missing TODO Search for cases # Missing TODO Update a case # Missing TODO Search cases by observable # Missing TODO Close a case # Missing TODO","title":"Case operations"},{"location":"samples/case-operations/#create-a-case","text":"Missing TODO","title":"Create a case"},{"location":"samples/case-operations/#get-a-case-by-id","text":"Missing TODO","title":"Get a case by ID"},{"location":"samples/case-operations/#find-a-case-using-few-criteria","text":"Missing TODO","title":"Find a case using few criteria"},{"location":"samples/case-operations/#search-for-cases","text":"Missing TODO","title":"Search for cases"},{"location":"samples/case-operations/#update-a-case","text":"Missing TODO","title":"Update a case"},{"location":"samples/case-operations/#search-cases-by-observable","text":"Missing TODO","title":"Search cases by observable"},{"location":"samples/case-operations/#close-a-case","text":"Missing TODO","title":"Close a case"},{"location":"samples/observable-operations/","text":"Missing TODO","title":"Observable operations"},{"location":"samples/task-operations/","text":"Missing TODO","title":"Task operations"}]}